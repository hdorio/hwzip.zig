// This file is a port of hwzip 2.0 from https://www.hanshq.net/zip.html

const reduce = @import("./reduce.zig");
const bs = @import("./bitstream.zig");
const hamlet = @embedFile("../fixtures/hamlet.txt");

const std = @import("std");
const allocator = std.testing.allocator;
const assert = std.debug.assert;
const expect = std.testing.expect;
const mem = std.mem;

//
// $ curl -O http://cd.textfiles.com/originalsw/25/pkz092.exe
// $ dosbox -c "mount c ." -c "c:" -c "pkz092" -c "exit"
// $ dd if=hamlet.txt of=a bs=1 count=2K
// $ dosbox -c "mount c ." -c "c:" -c "pkzip -ea4 a.zip a" -c "exit"
// $ xxd -i -s 31 -l $(expr $(find A.ZIP -printf %s) - 100) A.ZIP
//
const hamlet_2048: [1285]u8 = [_]u8{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x58, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x0f, 0x06, 0x11, 0x31, 0x21, 0x1f, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x99, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x80, 0xbc, 0x01, 0xc4, 0x5d, 0x1a, 0x5a, 0x98, 0x50, 0x06, 0x49, 0xcc, 0xb9, 0xd1, 0x91, 0x11,
    0x65, 0x20, 0x68, 0x73, 0x04, 0x08, 0x24, 0x5d, 0x19, 0x51, 0x06, 0x02, 0x99, 0x06, 0x08, 0x6c,
    0x61, 0x84, 0x9c, 0x5b, 0x1d, 0x1d, 0x02, 0xf9, 0x76, 0x46, 0x36, 0x46, 0x57, 0x96, 0x26, 0x40,
    0x86, 0x11, 0x65, 0x61, 0x90, 0x6c, 0x00, 0x40, 0xb8, 0xd1, 0xcd, 0xd5, 0x09, 0x61, 0x65, 0x02,
    0x64, 0x9d, 0xf0, 0x06, 0x42, 0x40, 0xca, 0xb9, 0x81, 0x10, 0x20, 0x90, 0x69, 0x65, 0x04, 0x24,
    0xdd, 0x1b, 0x9a, 0x50, 0xa6, 0x4e, 0xc8, 0xd1, 0xb9, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x00, 0xe9, 0x22, 0x50, 0x11, 0x11, 0x20, 0x68, 0x52, 0x49, 0x80, 0x40, 0x15, 0x04,
    0x00, 0x80, 0xf0, 0x26, 0x04, 0x08, 0x61, 0x41, 0x02, 0x24, 0x08, 0x00, 0x08, 0x4f, 0x45, 0x00,
    0x20, 0x48, 0x39, 0x09, 0x61, 0x45, 0x02, 0x1a, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa4, 0x1b, 0x00, 0x00, 0x80, 0x00, 0xd2, 0x00, 0x08,
    0x20, 0x90, 0x80, 0xa0, 0x22, 0x0e, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x20, 0x77, 0x61,
    0x53, 0x6f, 0x50, 0x45, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x80, 0x00, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xef, 0xbb, 0xbf, 0x0d, 0x28, 0xf7, 0xad, 0x5a, 0xd9, 0x31, 0xe9, 0x51, 0x1d, 0xc1, 0x62,
    0xe8, 0x59, 0x10, 0x2d, 0xf4, 0xf6, 0xed, 0x1a, 0x88, 0x35, 0x33, 0xd2, 0xb0, 0x6d, 0xd9, 0x90,
    0x2e, 0x0b, 0xc5, 0xe6, 0xf1, 0x2a, 0x2d, 0x9b, 0xa7, 0x0d, 0xdb, 0x16, 0x84, 0xd0, 0xb8, 0x56,
    0x76, 0x2e, 0xdc, 0xb2, 0x61, 0xc0, 0x06, 0x36, 0x90, 0x4a, 0xd3, 0x88, 0x65, 0xf0, 0x97, 0x34,
    0xa2, 0x19, 0x50, 0x3a, 0xea, 0x75, 0x30, 0xc0, 0x27, 0x8c, 0xf3, 0x14, 0x03, 0x0c, 0xee, 0xa8,
    0xe0, 0x69, 0x00, 0xef, 0xa8, 0xea, 0xe6, 0x42, 0x32, 0x10, 0xdd, 0x30, 0xe1, 0x1c, 0x84, 0xb6,
    0x81, 0x6d, 0xdf, 0xce, 0x51, 0x66, 0x2a, 0xb9, 0x48, 0x67, 0x01, 0x1f, 0x24, 0x20, 0xbd, 0xfb,
    0x86, 0x6c, 0xc9, 0x20, 0x52, 0x37, 0x09, 0x72, 0x0c, 0x30, 0x12, 0x46, 0x03, 0x48, 0x0c, 0x22,
    0xd9, 0xe8, 0x33, 0xca, 0x06, 0xca, 0xe1, 0x1c, 0xcb, 0xf9, 0x98, 0xa6, 0x7d, 0xd3, 0x39, 0x00,
    0x91, 0xbf, 0x2d, 0x6b, 0x87, 0xba, 0x10, 0x64, 0xd6, 0x1b, 0x83, 0x6c, 0x73, 0x1e, 0xc7, 0x18,
    0x6e, 0x1e, 0xd3, 0x94, 0x85, 0x67, 0xd3, 0xda, 0xe1, 0x69, 0x92, 0xbc, 0xf3, 0x3c, 0x0c, 0x2a,
    0x87, 0x2d, 0x90, 0xb0, 0x9a, 0xa6, 0x0d, 0xac, 0x93, 0x19, 0x07, 0x7a, 0xe9, 0xa0, 0x6d, 0x50,
    0x20, 0x24, 0x03, 0x74, 0x30, 0x4d, 0x3b, 0xb6, 0x8c, 0x00, 0x34, 0x6e, 0x98, 0x6d, 0x9d, 0x8d,
    0x04, 0x8f, 0x74, 0x9c, 0xc6, 0x0d, 0x70, 0x22, 0xe1, 0x0d, 0x32, 0x65, 0x9b, 0x16, 0x12, 0xf4,
    0xe9, 0x04, 0x40, 0x97, 0x67, 0xac, 0xd0, 0x72, 0xf9, 0x86, 0x67, 0x5d, 0x08, 0x32, 0xc9, 0xcc,
    0x79, 0x32, 0x88, 0x00, 0xee, 0x26, 0x56, 0xb6, 0x6f, 0xc7, 0x86, 0x85, 0xb4, 0x08, 0xc8, 0x13,
    0x1f, 0x0d, 0x50, 0x03, 0x24, 0x8b, 0xa0, 0x22, 0xb0, 0x39, 0x48, 0x34, 0xda, 0xe1, 0x74, 0xdf,
    0x82, 0x1c, 0xb3, 0xc7, 0xae, 0x41, 0x96, 0x40, 0xcb, 0xa6, 0x77, 0x21, 0x5b, 0xac, 0x8c, 0x91,
    0xd2, 0x72, 0xf3, 0xe0, 0x13, 0x6b, 0x79, 0x72, 0x03, 0x00, 0x18, 0xe4, 0x02, 0x2e, 0x31, 0x9a,
    0x01, 0x9a, 0x66, 0x1a, 0x08, 0x6f, 0x05, 0x59, 0x56, 0xec, 0xdb, 0xb7, 0x6b, 0x2e, 0x21, 0xad,
    0x18, 0xb2, 0x44, 0x72, 0x9a, 0xb2, 0xa1, 0x8e, 0x29, 0xe4, 0x21, 0x4d, 0x3b, 0xa8, 0x8e, 0xfc,
    0x86, 0x3a, 0xb2, 0x41, 0xbe, 0xd4, 0xb2, 0x6c, 0x18, 0x66, 0x3b, 0x11, 0x42, 0x1d, 0x3a, 0xd1,
    0x8e, 0x6d, 0xc5, 0x90, 0xc6, 0xe4, 0xe4, 0xe0, 0x80, 0xdc, 0x82, 0x3c, 0x12, 0x34, 0x12, 0x53,
    0x23, 0x43, 0xd3, 0xd5, 0x40, 0x26, 0x4c, 0xad, 0x0a, 0x97, 0x4c, 0x40, 0xae, 0x03, 0x95, 0x85,
    0x4b, 0x17, 0xf2, 0xc0, 0xca, 0x4c, 0x18, 0x16, 0xca, 0xc0, 0xc4, 0xe4, 0x40, 0x2a, 0x52, 0x26,
    0x48, 0x0e, 0x7b, 0xb6, 0xac, 0x0e, 0xda, 0x8d, 0xb2, 0x4d, 0x63, 0xb4, 0x90, 0xda, 0x35, 0x04,
    0x18, 0x76, 0x4c, 0x90, 0xce, 0x39, 0x9d, 0x96, 0x11, 0x99, 0x8c, 0xa0, 0x3a, 0xac, 0xa2, 0x51,
    0x0b, 0x0e, 0xa4, 0xfa, 0xa9, 0x40, 0x10, 0xa2, 0x1a, 0x24, 0x05, 0x3e, 0x19, 0x81, 0xa4, 0x8a,
    0x34, 0x69, 0x0a, 0x04, 0xa5, 0x3e, 0x29, 0x15, 0x1d, 0x12, 0x8f, 0xaa, 0x58, 0xa4, 0x45, 0x3c,
    0x02, 0xd1, 0x42, 0x4f, 0x4f, 0x4b, 0x46, 0x1a, 0xd4, 0xc4, 0xb4, 0x28, 0x15, 0xaa, 0x40, 0x48,
    0x82, 0x87, 0x2c, 0xa2, 0x4b, 0x87, 0x78, 0x74, 0x02, 0x1b, 0x5e, 0x0e, 0xe1, 0x04, 0x0d, 0x25,
    0x8f, 0x44, 0xd3, 0x86, 0xb1, 0x1b, 0xbb, 0x50, 0xd9, 0x30, 0x42, 0x8a, 0x0f, 0xaa, 0x48, 0x06,
    0x49, 0x45, 0x8f, 0x8a, 0x12, 0xcd, 0x82, 0x04, 0x35, 0xc8, 0x03, 0x4d, 0x2c, 0xa0, 0xd4, 0x24,
    0xa7, 0x43, 0x8b, 0x42, 0x02, 0x1f, 0x91, 0x6e, 0x0a, 0x92, 0xba, 0xc4, 0x8a, 0xa6, 0x06, 0xf8,
    0x83, 0x30, 0xc3, 0x83, 0x91, 0xa1, 0x6f, 0x52, 0x50, 0xad, 0x12, 0x6e, 0x87, 0xc4, 0xa4, 0x06,
    0x4e, 0x8d, 0x2d, 0x23, 0x7b, 0x92, 0x0b, 0x9a, 0xed, 0xdc, 0x34, 0x08, 0xd0, 0x85, 0x41, 0x20,
    0x8e, 0xd4, 0x0c, 0x6c, 0x63, 0x05, 0x31, 0x24, 0x8e, 0x1d, 0x1a, 0x66, 0x66, 0x43, 0x97, 0x90,
    0x14, 0x03, 0x99, 0x41, 0x46, 0xee, 0xdb, 0xb7, 0x6d, 0xa0, 0xf0, 0x9c, 0xb0, 0x0c, 0x6b, 0xf2,
    0x42, 0x1e, 0x98, 0xe1, 0x81, 0x4c, 0x12, 0x24, 0xa5, 0xa4, 0x21, 0x08, 0xbe, 0x65, 0xfb, 0x26,
    0x37, 0x8a, 0xc3, 0x1c, 0xa2, 0x7d, 0x23, 0x14, 0x81, 0xcb, 0x4a, 0x52, 0x49, 0xd0, 0x21, 0x24,
    0xd5, 0xb5, 0x02, 0x3a, 0xdb, 0xd0, 0x2b, 0x39, 0x6c, 0xfb, 0x66, 0xa0, 0x4c, 0x2f, 0xe4, 0x1a,
    0x5e, 0x48, 0x0a, 0x85, 0x4c, 0xc0, 0x0d, 0x39, 0xa1, 0x1b, 0x52, 0x28, 0xec, 0xac, 0xf0, 0x13,
    0x52, 0x06, 0xa4, 0x42, 0x0a, 0xc1, 0x14, 0x24, 0x17, 0x7c, 0x04, 0x81, 0x44, 0x23, 0x9b, 0x29,
    0x07, 0x20, 0x2c, 0x0f, 0x42, 0x90, 0xd0, 0xee, 0x06, 0x87, 0x96, 0x42, 0x8a, 0x42, 0x4a, 0x2b,
    0x64, 0x63, 0x12, 0x52, 0x14, 0x84, 0x9c, 0x71, 0x0a, 0x29, 0x11, 0x27, 0x94, 0x68, 0x84, 0x43,
    0xd3, 0x00, 0xa3, 0xd4, 0x88, 0x96, 0x71, 0x9b, 0x20, 0x82, 0x43, 0xb6, 0x58, 0x85, 0xec, 0x02,
    0x33, 0xc1, 0x8a, 0x15, 0x42, 0x71, 0x69, 0x85, 0x3c, 0xfc, 0x42, 0x1e, 0xa9, 0x86, 0xbc, 0xf1,
    0x30, 0xe6, 0x75, 0xe5, 0x8e, 0x79, 0xde, 0x30, 0x24, 0x13, 0x4b, 0x6c, 0x42, 0x0e, 0x3b, 0x96,
    0xa8, 0xdc, 0xb0, 0x6d, 0x6a, 0x1a, 0x81, 0x65, 0x3a, 0xf7, 0x4d, 0x87, 0x4d, 0x21, 0x87, 0xc5,
    0x83, 0x6c, 0x13, 0x28, 0x67, 0x20, 0x8a, 0x6d, 0xe3, 0xc1, 0xfb, 0x50, 0x26, 0xab, 0x9c, 0x54,
    0x75, 0x8a, 0x85, 0x4b, 0x0c, 0x62, 0x87, 0x7c, 0xb0, 0xc1, 0x62, 0xb2, 0xd1, 0x90, 0x45, 0xc4,
    0x15, 0xa2, 0xcc, 0x0f, 0xa4, 0x62, 0x1f, 0x21, 0x31, 0x45, 0x15, 0x72, 0x59, 0xba, 0x6c, 0xc4,
    0x98, 0xb5, 0x34, 0x10, 0x15, 0xba, 0x34, 0x1b, 0x16, 0x72, 0x58, 0x4f, 0x17, 0x79, 0x54, 0x04,
    0x5c, 0xa5, 0x59, 0x2c, 0x66, 0x54, 0xdd, 0xb2, 0x65, 0x84, 0x0a, 0xaf, 0xda, 0x28, 0xf6, 0x98,
    0x85, 0x6e, 0xf2, 0x2e, 0x08, 0xa8, 0x59, 0xc8, 0x72, 0x13, 0x86, 0xb2, 0x69, 0x9d, 0x69, 0x74,
    0x11, 0x9f, 0x98, 0x3e, 0x39, 0x85, 0x74, 0x4e, 0xa6, 0x6f, 0x48, 0x86, 0x43, 0x10, 0x72, 0xd4,
    0x0d, 0xa4, 0xd1, 0xba, 0x48, 0x26, 0x8b, 0x60, 0xd1, 0x29, 0x16, 0xe8, 0x4d, 0x30, 0x2a, 0x1d,
    0x72, 0xcd, 0xa4, 0x8b, 0x7c, 0x82, 0x42, 0x32, 0xd3, 0xa4, 0x20, 0x16, 0x12, 0xb1, 0xee, 0x59,
    0xb4, 0x90, 0xa3, 0x26, 0x20, 0x2f, 0x7c, 0x20, 0x21, 0x25, 0x95, 0x9f, 0x58, 0x68, 0x24, 0xe7,
    0x65, 0x34, 0x0d, 0x7b, 0xc2, 0xb9, 0xbe, 0x2e, 0xd2, 0xe8, 0x49, 0x0a, 0x3b, 0x29, 0xe5, 0x14,
    0xe4, 0x0c, 0x18, 0x27, 0x00,
};

test "expand_hamlet2048" {
    var dst: [2048]u8 = undefined;
    var src_used: usize = 0;

    try expect(reduce.hwexpand(
        &hamlet_2048,
        hamlet_2048.len,
        2048,
        4,
        &src_used,
        &dst,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    try expect(src_used == hamlet_2048.len);
    try expect(mem.eql(u8, dst[0..2048], hamlet[0..2048]));
}

//
// Put some text first to make PKZIP actually use Reduce compression.
// Target the code path which copies a zero when dist > current position.
//
// $ curl -O http://cd.textfiles.com/originalsw/25/pkz092.exe
// $ dosbox -c "mount c ." -c "c:" -c "pkz092" -c "exit"
// $ dd if=hamlet.txt bs=1 count=2048 > a
// $ dd if=/dev/zero  bs=1 count=1024 >> a
// $ dosbox -c "mount c ." -c "c:" -c "pkzip -ea4 a.zip a" -c "exit"
// $ xxd -i -s 31 -l $(expr $(find A.ZIP -printf %s) - 100) A.ZIP
//
const zeros_reduced = [_]u8{
    0xc2, 0x3f, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x58, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x0f, 0x06, 0x11, 0x31, 0x21, 0x1f, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x99, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x80, 0xbc, 0x01, 0xc4, 0x5d, 0x1a, 0x5a, 0x98, 0x50, 0x06, 0x49, 0xcc, 0xb9, 0xd1,
    0x91, 0x11, 0x65, 0x20, 0x68, 0x73, 0x04, 0x08, 0x24, 0x5d, 0x19, 0x51, 0x06, 0x02, 0x99, 0x06,
    0x08, 0x6c, 0x61, 0x84, 0x9c, 0x5b, 0x1d, 0x1d, 0x02, 0xf9, 0x76, 0x46, 0x36, 0x46, 0x57, 0x96,
    0x26, 0x40, 0x86, 0x11, 0x65, 0x61, 0x90, 0x6c, 0x00, 0x40, 0xb8, 0xd1, 0xcd, 0xd5, 0x09, 0x61,
    0x65, 0x02, 0x64, 0x9d, 0xf0, 0x06, 0x42, 0x40, 0xca, 0xb9, 0x81, 0x10, 0x20, 0x90, 0x69, 0x65,
    0x04, 0x24, 0xdd, 0x1b, 0x9a, 0x50, 0xa6, 0x4e, 0xc8, 0xd1, 0xb9, 0xcd, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0x00, 0xe9, 0x22, 0x50, 0x11, 0x11, 0x20, 0x68, 0x52, 0x49, 0x80, 0x40,
    0x15, 0x04, 0x00, 0x80, 0xf0, 0x26, 0x04, 0x08, 0x61, 0x41, 0x02, 0x24, 0x08, 0x00, 0x08, 0x4f,
    0x45, 0x00, 0x20, 0x48, 0x39, 0x09, 0x61, 0x45, 0x02, 0x1a, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa4, 0x1b, 0x00, 0x00, 0x80, 0x00, 0xd2,
    0x00, 0x08, 0x20, 0x90, 0x80, 0xa0, 0x22, 0x0e, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x77, 0x61, 0x53, 0x6f, 0x50, 0x45, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x80, 0x00, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xef, 0xbb, 0xbf, 0x0d, 0x28, 0xf7, 0xad, 0x5a, 0xd9, 0x31, 0xe9, 0x51, 0x1d,
    0xc1, 0x62, 0xe8, 0x59, 0x10, 0x2d, 0xf4, 0xf6, 0xed, 0x1a, 0x88, 0x35, 0x33, 0xd2, 0xb0, 0x6d,
    0xd9, 0x90, 0x2e, 0x0b, 0xc5, 0xe6, 0xf1, 0x2a, 0x2d, 0x9b, 0xa7, 0x0d, 0xdb, 0x16, 0x84, 0xd0,
    0xb8, 0x56, 0x76, 0x2e, 0xdc, 0xb2, 0x61, 0xc0, 0x06, 0x36, 0x90, 0x4a, 0xd3, 0x88, 0x65, 0xf0,
    0x97, 0x34, 0xa2, 0x19, 0x50, 0x3a, 0xea, 0x75, 0x30, 0xc0, 0x27, 0x8c, 0xf3, 0x14, 0x03, 0x0c,
    0xee, 0xa8, 0xe0, 0x69, 0x00, 0xef, 0xa8, 0xea, 0xe6, 0x42, 0x32, 0x10, 0xdd, 0x30, 0xe1, 0x1c,
    0x84, 0xb6, 0x81, 0x6d, 0xdf, 0xce, 0x51, 0x66, 0x2a, 0xb9, 0x48, 0x67, 0x01, 0x1f, 0x24, 0x20,
    0xbd, 0xfb, 0x86, 0x6c, 0xc9, 0x20, 0x52, 0x37, 0x09, 0x72, 0x0c, 0x30, 0x12, 0x46, 0x03, 0x48,
    0x0c, 0x22, 0xd9, 0xe8, 0x33, 0xca, 0x06, 0xca, 0xe1, 0x1c, 0xcb, 0xf9, 0x98, 0xa6, 0x7d, 0xd3,
    0x39, 0x00, 0x91, 0xbf, 0x2d, 0x6b, 0x87, 0xba, 0x10, 0x64, 0xd6, 0x1b, 0x83, 0x6c, 0x73, 0x1e,
    0xc7, 0x18, 0x6e, 0x1e, 0xd3, 0x94, 0x85, 0x67, 0xd3, 0xda, 0xe1, 0x69, 0x92, 0xbc, 0xf3, 0x3c,
    0x0c, 0x2a, 0x87, 0x2d, 0x90, 0xb0, 0x9a, 0xa6, 0x0d, 0xac, 0x93, 0x19, 0x07, 0x7a, 0xe9, 0xa0,
    0x6d, 0x50, 0x20, 0x24, 0x03, 0x74, 0x30, 0x4d, 0x3b, 0xb6, 0x8c, 0x00, 0x34, 0x6e, 0x98, 0x6d,
    0x9d, 0x8d, 0x04, 0x8f, 0x74, 0x9c, 0xc6, 0x0d, 0x70, 0x22, 0xe1, 0x0d, 0x32, 0x65, 0x9b, 0x16,
    0x12, 0xf4, 0xe9, 0x04, 0x40, 0x97, 0x67, 0xac, 0xd0, 0x72, 0xf9, 0x86, 0x67, 0x5d, 0x08, 0x32,
    0xc9, 0xcc, 0x79, 0x32, 0x88, 0x00, 0xee, 0x26, 0x56, 0xb6, 0x6f, 0xc7, 0x86, 0x85, 0xb4, 0x08,
    0xc8, 0x13, 0x1f, 0x0d, 0x50, 0x03, 0x24, 0x8b, 0xa0, 0x22, 0xb0, 0x39, 0x48, 0x34, 0xda, 0xe1,
    0x74, 0xdf, 0x82, 0x1c, 0xb3, 0xc7, 0xae, 0x41, 0x96, 0x40, 0xcb, 0xa6, 0x77, 0x21, 0x5b, 0xac,
    0x8c, 0x91, 0xd2, 0x72, 0xf3, 0xe0, 0x13, 0x6b, 0x79, 0x72, 0x03, 0x00, 0x18, 0xe4, 0x02, 0x2e,
    0x31, 0x9a, 0x01, 0x9a, 0x66, 0x1a, 0x08, 0x6f, 0x05, 0x59, 0x56, 0xec, 0xdb, 0xb7, 0x6b, 0x2e,
    0x21, 0xad, 0x18, 0xb2, 0x44, 0x72, 0x9a, 0xb2, 0xa1, 0x8e, 0x29, 0xe4, 0x21, 0x4d, 0x3b, 0xa8,
    0x8e, 0xfc, 0x86, 0x3a, 0xb2, 0x41, 0xbe, 0xd4, 0xb2, 0x6c, 0x18, 0x66, 0x3b, 0x11, 0x42, 0x1d,
    0x3a, 0xd1, 0x8e, 0x6d, 0xc5, 0x90, 0xc6, 0xe4, 0xe4, 0xe0, 0x80, 0xdc, 0x82, 0x3c, 0x12, 0x34,
    0x12, 0x53, 0x23, 0x43, 0xd3, 0xd5, 0x40, 0x26, 0x4c, 0xad, 0x0a, 0x97, 0x4c, 0x40, 0xae, 0x03,
    0x95, 0x85, 0x4b, 0x17, 0xf2, 0xc0, 0xca, 0x4c, 0x18, 0x16, 0xca, 0xc0, 0xc4, 0xe4, 0x40, 0x2a,
    0x52, 0x26, 0x48, 0x0e, 0x7b, 0xb6, 0xac, 0x0e, 0xda, 0x8d, 0xb2, 0x4d, 0x63, 0xb4, 0x90, 0xda,
    0x35, 0x04, 0x18, 0x76, 0x4c, 0x90, 0xce, 0x39, 0x9d, 0x96, 0x11, 0x99, 0x8c, 0xa0, 0x3a, 0xac,
    0xa2, 0x51, 0x0b, 0x0e, 0xa4, 0xfa, 0xa9, 0x40, 0x10, 0xa2, 0x1a, 0x24, 0x05, 0x3e, 0x19, 0x81,
    0xa4, 0x8a, 0x34, 0x69, 0x0a, 0x04, 0xa5, 0x3e, 0x29, 0x15, 0x1d, 0x12, 0x8f, 0xaa, 0x58, 0xa4,
    0x45, 0x3c, 0x02, 0xd1, 0x42, 0x4f, 0x4f, 0x4b, 0x46, 0x1a, 0xd4, 0xc4, 0xb4, 0x28, 0x15, 0xaa,
    0x40, 0x48, 0x82, 0x87, 0x2c, 0xa2, 0x4b, 0x87, 0x78, 0x74, 0x02, 0x1b, 0x5e, 0x0e, 0xe1, 0x04,
    0x0d, 0x25, 0x8f, 0x44, 0xd3, 0x86, 0xb1, 0x1b, 0xbb, 0x50, 0xd9, 0x30, 0x42, 0x8a, 0x0f, 0xaa,
    0x48, 0x06, 0x49, 0x45, 0x8f, 0x8a, 0x12, 0xcd, 0x82, 0x04, 0x35, 0xc8, 0x03, 0x4d, 0x2c, 0xa0,
    0xd4, 0x24, 0xa7, 0x43, 0x8b, 0x42, 0x02, 0x1f, 0x91, 0x6e, 0x0a, 0x92, 0xba, 0xc4, 0x8a, 0xa6,
    0x06, 0xf8, 0x83, 0x30, 0xc3, 0x83, 0x91, 0xa1, 0x6f, 0x52, 0x50, 0xad, 0x12, 0x6e, 0x87, 0xc4,
    0xa4, 0x06, 0x4e, 0x8d, 0x2d, 0x23, 0x7b, 0x92, 0x0b, 0x9a, 0xed, 0xdc, 0x34, 0x08, 0xd0, 0x85,
    0x41, 0x20, 0x8e, 0xd4, 0x0c, 0x6c, 0x63, 0x05, 0x31, 0x24, 0x8e, 0x1d, 0x1a, 0x66, 0x66, 0x43,
    0x97, 0x90, 0x14, 0x03, 0x99, 0x41, 0x46, 0xee, 0xdb, 0xb7, 0x6d, 0xa0, 0xf0, 0x9c, 0xb0, 0x0c,
    0x6b, 0xf2, 0x42, 0x1e, 0x98, 0xe1, 0x81, 0x4c, 0x12, 0x24, 0xa5, 0xa4, 0x21, 0x08, 0xbe, 0x65,
    0xfb, 0x26, 0x37, 0x8a, 0xc3, 0x1c, 0xa2, 0x7d, 0x23, 0x14, 0x81, 0xcb, 0x4a, 0x52, 0x49, 0xd0,
    0x21, 0x24, 0xd5, 0xb5, 0x02, 0x3a, 0xdb, 0xd0, 0x2b, 0x39, 0x6c, 0xfb, 0x66, 0xa0, 0x4c, 0x2f,
    0xe4, 0x1a, 0x5e, 0x48, 0x0a, 0x85, 0x4c, 0xc0, 0x0d, 0x39, 0xa1, 0x1b, 0x52, 0x28, 0xec, 0xac,
    0xf0, 0x13, 0x52, 0x06, 0xa4, 0x42, 0x0a, 0xc1, 0x14, 0x24, 0x17, 0x7c, 0x04, 0x81, 0x44, 0x23,
    0x9b, 0x29, 0x07, 0x20, 0x2c, 0x0f, 0x42, 0x90, 0xd0, 0xee, 0x06, 0x87, 0x96, 0x42, 0x8a, 0x42,
    0x4a, 0x2b, 0x64, 0x63, 0x12, 0x52, 0x14, 0x84, 0x9c, 0x71, 0x0a, 0x29, 0x11, 0x27, 0x94, 0x68,
    0x84, 0x43, 0xd3, 0x00, 0xa3, 0xd4, 0x88, 0x96, 0x71, 0x9b, 0x20, 0x82, 0x43, 0xb6, 0x58, 0x85,
    0xec, 0x02, 0x33, 0xc1, 0x8a, 0x15, 0x42, 0x71, 0x69, 0x85, 0x3c, 0xfc, 0x42, 0x1e, 0xa9, 0x86,
    0xbc, 0xf1, 0x30, 0xe6, 0x75, 0xe5, 0x8e, 0x79, 0xde, 0x30, 0x24, 0x13, 0x4b, 0x6c, 0x42, 0x0e,
    0x3b, 0x96, 0xa8, 0xdc, 0xb0, 0x6d, 0x6a, 0x1a, 0x81, 0x65, 0x3a, 0xf7, 0x4d, 0x87, 0x4d, 0x21,
    0x87, 0xc5, 0x83, 0x6c, 0x13, 0x28, 0x67, 0x20, 0x8a, 0x6d, 0xe3, 0xc1, 0xfb, 0x50, 0x26, 0xab,
    0x9c, 0x54, 0x75, 0x8a, 0x85, 0x4b, 0x0c, 0x62, 0x87, 0x7c, 0xb0, 0xc1, 0x62, 0xb2, 0xd1, 0x90,
    0x45, 0xc4, 0x15, 0xa2, 0xcc, 0x0f, 0xa4, 0x62, 0x1f, 0x21, 0x31, 0x45, 0x15, 0x72, 0x59, 0xba,
    0x6c, 0xc4, 0x98, 0xb5, 0x34, 0x10, 0x15, 0xba, 0x34, 0x1b, 0x16, 0x72, 0x58, 0x4f, 0x17, 0x79,
    0x54, 0x04, 0x5c, 0xa5, 0x59, 0x2c, 0x66, 0x54, 0xdd, 0xb2, 0x65, 0x84, 0x0a, 0xaf, 0xda, 0x28,
    0xf6, 0x98, 0x85, 0x6e, 0xf2, 0x2e, 0x08, 0xa8, 0x59, 0xc8, 0x72, 0x13, 0x86, 0xb2, 0x69, 0x9d,
    0x69, 0x74, 0x11, 0x9f, 0x98, 0x3e, 0x39, 0x85, 0x74, 0x4e, 0xa6, 0x6f, 0x48, 0x86, 0x43, 0x10,
    0x72, 0xd4, 0x0d, 0xa4, 0xd1, 0xba, 0x48, 0x26, 0x8b, 0x60, 0xd1, 0x29, 0x16, 0xe8, 0x4d, 0x30,
    0x2a, 0x1d, 0x72, 0xcd, 0xa4, 0x8b, 0x7c, 0x82, 0x42, 0x32, 0xd3, 0xa4, 0x20, 0x16, 0x12, 0xb1,
    0xee, 0x59, 0xb4, 0x90, 0xa3, 0x26, 0x20, 0x2f, 0x7c, 0x20, 0x21, 0x25, 0x95, 0x9f, 0x58, 0x68,
    0x24, 0xe7, 0x65, 0x34, 0x0d, 0x7b, 0xc2, 0xb9, 0xbe, 0x2e, 0xd2, 0xe8, 0x49, 0x0a, 0x3b, 0x29,
    0xe5, 0x14, 0xe4, 0x0c, 0x18, 0x27, 0x42, 0xfe, 0x07, 0xff, 0x83, 0xff, 0xc1, 0xff, 0x77, 0xff,
    0x01,
};

test "expand_zeros" {
    var dst: [2048 + 1024]u8 = undefined;
    var src_used: usize = 0;
    var i: usize = 0;

    try expect(reduce.hwexpand(
        &zeros_reduced,
        zeros_reduced.len,
        dst.len,
        4,
        &src_used,
        &dst,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    try expect(src_used == zeros_reduced.len);
    try expect(mem.eql(u8, dst[0..2048], hamlet[0..2048]));
    i = 0;
    while (i < 1024) : (i += 1) {
        try expect(dst[2048 + i] == 0);
    }
}

const DLE_BYTE = 144;

test "expand_overlap" {
    // PKZIP's Reduce does not appear to emit overlapping back references,
    // so we don't emit them either. However, the spec does seem to allow
    // them, so be generous in the input we accept.

    var compressed: [1024]u8 = undefined;
    var decompressed: [1042]u8 = undefined;
    var compressed_sz: usize = 0;
    var comp_used: usize = 0;
    var os: bs.ostream_t = undefined;

    var i: usize = 0;

    bs.ostream_init(&os, &compressed, compressed.len);

    // Empty follower sets.
    i = 0;
    while (i < 256) : (i += 1) {
        _ = bs.ostream_write(&os, 0, 6);
    }

    // "fa-la-l"
    _ = bs.ostream_write(&os, 'f', 8);
    _ = bs.ostream_write(&os, 'a', 8);
    _ = bs.ostream_write(&os, '-', 8);
    _ = bs.ostream_write(&os, 'l', 8);
    _ = bs.ostream_write(&os, 'a', 8);
    _ = bs.ostream_write(&os, '-', 8);
    _ = bs.ostream_write(&os, 'l', 8);

    // Backref dist: 6, len: 7  -- "a-la-la"
    _ = bs.ostream_write(&os, DLE_BYTE, 8);
    _ = bs.ostream_write(&os, 7 - 3, 8);
    _ = bs.ostream_write(&os, 6 - 1, 8);

    // "!"
    _ = bs.ostream_write(&os, '!', 8);

    compressed_sz = bs.ostream_bytes_written(&os);
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        15,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    try expect(mem.eql(u8, decompressed[0..15], "fa-la-la-la-la!"));
}

test "expand_too_short" {
    var dst: [2048]u8 = undefined;
    var src_used: usize = 0;
    var i: usize = 0;

    // Not enough input.
    i = 0;
    while (i < 500) : (i += 1) {
        assert(i < hamlet_2048.len);
        try expect(reduce.hwexpand(
            &hamlet_2048,
            i,
            2048,
            4,
            &src_used,
            &dst,
        ) == reduce.expand_stat_t.HWEXPAND_ERR);
    }
}

test "expand_too_short2" {
    // Test not enough input to read the "extra len" byte
    // in a back reference.

    var compressed: [1024]u8 = undefined;
    var decompressed: [1042]u8 = undefined;
    var compressed_sz: usize = 0;
    var comp_used: usize = 0;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;

    bs.ostream_init(&os, &compressed, compressed.len);

    // Empty follower sets.
    i = 0;
    while (i < 256) : (i += 1) {
        _ = bs.ostream_write(&os, 0, 6);
    }

    // Some bytes.
    i = 0;
    while (i < 30) : (i += 1) {
        _ = bs.ostream_write(&os, 42, 8);
    }

    // Backref; dist: 30, len: 24
    _ = bs.ostream_write(&os, DLE_BYTE, 8);
    _ = bs.ostream_write(&os, 15, 8); // Comp. level 4 => 4 len bits in v.
    _ = bs.ostream_write(&os, (24 - 3 - 15), 8); // Extra length byte.
    _ = bs.ostream_write(&os, (30 - 1), 8); // Dist byte.

    compressed_sz = bs.ostream_bytes_written(&os);
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        54,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    i = 0;
    while (i < 54) : (i += 1) {
        try expect(decompressed[i] == 42);
    }

    // Not enough input.
    i = 0;
    while (i < compressed_sz) : (i += 1) {
        try expect(reduce.hwexpand(
            &compressed,
            i,
            54,
            4,
            &comp_used,
            &decompressed,
        ) == reduce.expand_stat_t.HWEXPAND_ERR);
    }

    // Back reference would yield longer than expected output.
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        54 - 1,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_ERR);
}

fn roundtrip(src: [*]const u8, src_len: usize, comp_factor: u3) !void {
    var compressed: [*]u8 = undefined;
    var uncompressed: [*]u8 = undefined;
    var compressed_cap: usize = 0;
    var compressed_size: usize = 0;
    var compressed_used: usize = 0;

    assert(comp_factor >= 1 and comp_factor <= 4);

    compressed_cap = src_len * 2 + 500;
    var compressed_mem = try allocator.alloc(u8, compressed_cap);
    compressed = compressed_mem.ptr;
    var uncompressed_mem = try allocator.alloc(u8, src_len);
    uncompressed = uncompressed_mem.ptr;

    try expect(reduce.hwreduce(
        src,
        src_len,
        comp_factor,
        compressed,
        compressed_cap,
        &compressed_size,
    ));

    try expect(reduce.hwexpand(
        compressed,
        compressed_size,
        src_len,
        comp_factor,
        &compressed_used,
        uncompressed,
    ) == reduce.expand_stat_t.HWEXPAND_OK);

    try expect(compressed_used == compressed_size);
    try expect(mem.eql(u8, uncompressed[0..src_len], src[0..src_len]));

    allocator.free(compressed_mem);
    allocator.free(uncompressed_mem);
}

test "reduce_roundtrip_empty" {
    var comp_factor: u3 = 0;
    const src: [1]u8 = [1]u8{0x00};

    comp_factor = 1;
    while (comp_factor <= 4) : (comp_factor += 1) {
        try roundtrip(
            @intToPtr([*]u8, @ptrToInt(&src[0]) + 8), // pointer to outside allowed memory, expecting no one reads it
            0,
            comp_factor,
        );
    }
}

test "reduce_roundtrip_dle" {
    const src = [_]u8{144};
    var comp_factor: u3 = 0;

    comp_factor = 1;
    while (comp_factor <= 4) : (comp_factor += 1) {
        try roundtrip(&src, src.len, comp_factor);
    }
}

test "reduce_roundtrip_hamlet" {
    var comp_factor: u3 = 0;

    comp_factor = 1;
    while (comp_factor <= 4) : (comp_factor += 1) {
        try roundtrip(hamlet, hamlet.len, comp_factor);
    }
}

test "reduce_hamlet_size" {
    var compressed: [1024 * 512]u8 = undefined;
    var compressed_sz: usize = 0;

    // Update the expected sizes if compression improves.

    // Compression factor 1.
    try expect(reduce.hwreduce(hamlet, hamlet.len, 1, &compressed, compressed.len, &compressed_sz));
    try expect(compressed_sz == 111878);
    // PKZIP 0.92 -ea1:    111694

    // Compression factor 2.
    try expect(reduce.hwreduce(hamlet, hamlet.len, 2, &compressed, compressed.len, &compressed_sz));
    try expect(compressed_sz == 108347);
    // PKZIP 0.92 -ea2:    108623

    // Compression factor 3.
    try expect(reduce.hwreduce(hamlet, hamlet.len, 3, &compressed, compressed.len, &compressed_sz));
    try expect(compressed_sz == 105060);
    // PKZIP 0.92 -ea3:    106162

    // Compression factor 4.
    try expect(reduce.hwreduce(hamlet, hamlet.len, 4, &compressed, compressed.len, &compressed_sz));
    try expect(compressed_sz == 101872);
    // PKZIP 0.92 -ea4:    102973
}

test "reduce_too_short" {
    var comp_factor: u3 = 4;
    var compressed: [1024 * 512]u8 = undefined;
    var compressed_sz: usize = 0;
    var tmp: usize = 0;
    var i: usize = 0;

    // Check trying to compress Hamlet into a destination buffer of various too small sizes.
    try expect(reduce.hwreduce(hamlet, hamlet.len, comp_factor, &compressed, compressed.len, &compressed_sz));

    i = compressed_sz - 100;
    while (i < compressed_sz) : (i += 1) {
        try expect(!reduce.hwreduce(hamlet, hamlet.len, comp_factor, &compressed, i, &tmp));
    }

    // Check trying to compress something small, so it fits in the raw bytes
    // buffer which cannot be flushed due to the too small dst buffer.
    try expect(reduce.hwreduce("foo", 3, comp_factor, &compressed, compressed.len, &compressed_sz));

    i = 0;
    while (i < compressed_sz) : (i += 1) {
        try expect(!reduce.hwreduce("foo", 3, comp_factor, &compressed, i, &tmp));
    }
}

test "reduce_implicit_zero_follower" {
    var compressed: [512]u8 = undefined;
    var decompressed: [1]u8 = undefined;
    var compressed_sz: usize = 0;
    var comp_used: usize = 0;
    var os: bs.ostream_t = undefined;
    var i: i32 = 0;

    bs.ostream_init(&os, &compressed, compressed.len);

    // Bytes 255--1 have no followers.
    i = 255;
    while (i > 0) : (i -= 1) {
        _ = bs.ostream_write(&os, 0, 6);
    }
    // Byte 0 has 1 follower: 'a'.
    _ = bs.ostream_write(&os, 1, 6);
    _ = bs.ostream_write(&os, 'a', 8);

    // LSB-first 0 indicates use follower, 0 is the follower index.
    _ = bs.ostream_write(&os, 0, 2);
    compressed_sz = bs.ostream_bytes_written(&os);

    // Decompression starts with 0 as implicit last byte. Check that using
    // a follower of that directly works.
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        1,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    try expect(decompressed[0] == 'a');
}

test "reduce_bad_follower_index" {
    var compressed: [512]u8 = undefined;
    var decompressed: [1]u8 = undefined;
    var compressed_sz: usize = 0;
    var comp_used: usize = 0;
    var os: bs.ostream_t = undefined;
    var i: u32 = 0;

    bs.ostream_init(&os, &compressed, compressed.len);

    // All bytes have one follower: 'x'.
    i = 0;
    while (i < 256) : (i += 1) {
        _ = bs.ostream_write(&os, 1, 6);
        _ = bs.ostream_write(&os, 'x', 8);
    }

    // LSB-first 0 indicates use follower, 1 is the bad follower index.
    _ = bs.ostream_write(&os, 0x1 << 1, 2);
    compressed_sz = bs.ostream_bytes_written(&os);

    // Decompression starts with 0 as implicit last byte.
    // Should fail due to the too high follower index.
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        1,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_ERR);
}

test "reduce_max_follower_set_size" {
    var compressed: [512]u8 = undefined;
    var decompressed: [1]u8 = undefined;
    var compressed_sz: usize = 0;
    var comp_used: usize = 0;
    var os: bs.ostream_t = undefined;
    var i: i32 = 0;

    // Bytes 255--1 have no followers.
    bs.ostream_init(&os, &compressed, compressed.len);
    i = 255;
    while (i > 0) : (i -= 1) {
        _ = bs.ostream_write(&os, 0, 6);
    }
    // Byte 0 has 32 followers.
    _ = bs.ostream_write(&os, 32, 6);
    i = 0;
    while (i < 32) : (i += 1) {
        _ = bs.ostream_write(&os, @intCast(u8, i), 8);
    }

    _ = bs.ostream_write(&os, 0, 1); // Use follower.
    _ = bs.ostream_write(&os, 31, 5); // Follower idx 31.

    compressed_sz = bs.ostream_bytes_written(&os);

    // Decompression starts with 0 as implicit last byte.
    // Should use the follower.
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        1,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_OK);
    try expect(decompressed[0] == 31);

    // Now try having 33 followers. That should fail.

    // Bytes 255--1 have no followers.
    bs.ostream_init(&os, &compressed, compressed.len);
    i = 255;
    while (i > 0) : (i -= 1) {
        _ = bs.ostream_write(&os, 0, 6);
    }
    // Byte 0 has 33 followers.
    _ = bs.ostream_write(&os, 33, 6);
    i = 0;
    while (i < 33) : (i += 1) {
        _ = bs.ostream_write(&os, @intCast(u8, i), 8);
    }
    compressed_sz = bs.ostream_bytes_written(&os);
    try expect(reduce.hwexpand(
        &compressed,
        compressed_sz,
        0,
        4,
        &comp_used,
        &decompressed,
    ) == reduce.expand_stat_t.HWEXPAND_ERR);
}
