// This file is a port of hwzip 2.0 from https://www.hanshq.net/zip.html

const implode = @import("./implode.zig");
const bs = @import("./bitstream.zig");
const hm = @import("./huffman.zig");
const lz = @import("./lz77.zig");
const bits_utils = @import("./bits.zig");
const hamlet = @embedFile("../fixtures/hamlet.txt");

const std = @import("std");
const allocator = std.testing.allocator;
const assert = std.debug.assert;
const expect = std.testing.expect;
const math = std.math;
const mem = std.mem;

//
// $ curl -O http://cd.textfiles.com/1stcanadian/utils/pkz110/pkz110.exe
// $ unzip pkz110.exe PKZIP.EXE
// $ dd if=hamlet.txt of=a bs=1 count=256
// $ dosbox -c "mount c ." -c "c:" -c "pkzip -ei a.zip a" -c exit
// $ xxd -i -s 31 -l $(expr $(find A.ZIP -printf %s) - 100) A.ZIP
//
const hamlet_256 = [249]u8{
    0x0d, 0x02, 0x01, 0x12, 0x23, 0x14, 0x15, 0x36, 0x37, 0x68, 0x89, 0x9a,
    0xdb, 0x3c, 0x05, 0x06, 0x12, 0x13, 0x44, 0xc5, 0xf6, 0x96, 0xf7, 0xdf,
    0xef, 0xfe, 0xdd, 0x50, 0x21, 0x54, 0xb9, 0x6f, 0xd5, 0x96, 0x1d, 0x4b,
    0x17, 0xe4, 0xd1, 0xba, 0x74, 0xcb, 0xba, 0x15, 0x5b, 0x56, 0xee, 0x59,
    0x90, 0x45, 0x85, 0xbe, 0x7d, 0xbb, 0x16, 0xe4, 0x5b, 0xb3, 0x20, 0x91,
    0x86, 0x6d, 0xcb, 0xb6, 0x2c, 0x5d, 0x96, 0x20, 0xc5, 0xe6, 0x05, 0x79,
    0x35, 0x2d, 0x5b, 0xb6, 0x69, 0x9c, 0x37, 0xc8, 0xa9, 0x68, 0xc3, 0xae,
    0x2d, 0x3b, 0x17, 0x6e, 0xd9, 0xb0, 0x72, 0xcb, 0xe8, 0xaf, 0xe0, 0x4d,
    0x15, 0x6d, 0xda, 0xb9, 0x20, 0xcb, 0xbc, 0x37, 0xe4, 0x37, 0xfb, 0x56,
    0x2e, 0x48, 0xba, 0x68, 0xcb, 0x82, 0xac, 0x3b, 0xb7, 0x8c, 0xff, 0x0c,
    0xeb, 0x36, 0xef, 0x5b, 0xb7, 0x65, 0x8c, 0xe7, 0x1d, 0xea, 0xf5, 0xbe,
    0xc2, 0xb7, 0x9b, 0xee, 0x5e, 0xd5, 0x6d, 0x9a, 0x74, 0x4d, 0x26, 0x59,
    0xd3, 0x0d, 0x63, 0xbc, 0xe7, 0x74, 0x3f, 0x19, 0x63, 0xdd, 0xf6, 0xed,
    0x1c, 0xa0, 0xfb, 0x0d, 0xf7, 0xfd, 0x6f, 0x38, 0xd9, 0x9a, 0xee, 0x9c,
    0xfe, 0xa1, 0x3e, 0xef, 0x40, 0x6b, 0x36, 0xe9, 0xeb, 0x7c, 0x83, 0x74,
    0xfb, 0x16, 0xe4, 0x98, 0xf1, 0xd1, 0x7e, 0xd4, 0xcb, 0x7f, 0xa3, 0x41,
    0xde, 0x6c, 0xe6, 0xdb, 0xf5, 0xe2, 0x5f, 0xd9, 0x0a, 0x79, 0xcb, 0x4d,
    0x13, 0x54, 0xa7, 0x61, 0x57, 0xf8, 0x2b, 0x5d, 0xb5, 0xef, 0xb9, 0x6f,
    0xcb, 0xda, 0x49, 0xd6, 0x2e, 0x41, 0x82, 0xcc, 0xfa, 0xb6, 0x2e, 0xc8,
    0xb6, 0x61, 0xf3, 0xe8, 0x3f, 0x1c, 0xe2, 0x9d, 0x06, 0xa9, 0x9f, 0x4d,
    0x6b, 0xc7, 0xe8, 0x19, 0xfb, 0x9d, 0xea, 0x63, 0xbb,
};

// Test exploding data without literal tree and large window.
test "explode_hamlet_256" {
    var dst: [256]u8 = undefined;
    var src_used: usize = 0;

    try expect((try implode.hwexplode(
        &hamlet_256,
        hamlet_256.len,
        256,
        false, //large_wnd
        false, //lit_tree
        false, //pk101_bug_compat
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_OK);
    try expect(src_used == hamlet_256.len);
    try expect(mem.eql(u8, dst[0..256], hamlet[0..256]));
}

//
// $ curl -O http://cd.textfiles.com/1stcanadian/utils/pkz110/pkz110.exe
// $ unzip pkz110.exe PKZIP.EXE
// $ dd if=hamlet.txt of=a bs=1 count=8192
// $ dosbox -c "mount c ." -c "c:" -c "pkzip -ei a.zip a" -c exit
// $ xxd -i -s 31 -l $(expr $(find A.ZIP -printf %s) - 100) A.ZIP
//
const hamlet_8192 = [3830]u8{
    0x61, 0x0a, 0x7b, 0x07, 0x06, 0x1b, 0x06, 0xbb, 0x0c, 0x4b, 0x03, 0x09, 0x07, 0x0b, 0x09, 0x0b,
    0x09, 0x07, 0x16, 0x07, 0x08, 0x06, 0x05, 0x06, 0x07, 0x06, 0x05, 0x36, 0x07, 0x16, 0x17, 0x0b,
    0x0a, 0x06, 0x08, 0x0a, 0x0b, 0x05, 0x06, 0x15, 0x04, 0x06, 0x17, 0x05, 0x0a, 0x08, 0x05, 0x06,
    0x15, 0x06, 0x0a, 0x25, 0x06, 0x08, 0x07, 0x18, 0x0a, 0x07, 0x0a, 0x08, 0x0b, 0x07, 0x0b, 0x04,
    0x25, 0x04, 0x25, 0x04, 0x0a, 0x06, 0x04, 0x05, 0x14, 0x05, 0x09, 0x34, 0x07, 0x06, 0x17, 0x09,
    0x1a, 0x2b, 0xfc, 0xfc, 0xfc, 0xfb, 0xfb, 0xfb, 0x0c, 0x0b, 0x2c, 0x0b, 0x2c, 0x0b, 0x3c, 0x0b,
    0x2c, 0x2b, 0xac, 0x0c, 0x01, 0x22, 0x23, 0x14, 0x15, 0x36, 0x37, 0x68, 0x89, 0x9a, 0xdb, 0x3c,
    0x05, 0x06, 0x12, 0x23, 0x14, 0xe5, 0xf6, 0x96, 0xf7, 0x01, 0x6c, 0x50, 0x08, 0x32, 0x45, 0xc5,
    0x49, 0xdb, 0x1e, 0x42, 0x77, 0x63, 0xf9, 0x51, 0xe7, 0xe5, 0x3e, 0x9a, 0xf7, 0x56, 0xfd, 0x6f,
    0xea, 0xbe, 0x27, 0xfc, 0xbd, 0xf6, 0xa3, 0x3c, 0xe5, 0xf3, 0x5e, 0xf2, 0x7f, 0x33, 0xdc, 0x8f,
    0x7c, 0x9d, 0xe7, 0xf5, 0x94, 0x7f, 0xbb, 0xf2, 0x24, 0xdc, 0x6b, 0xe9, 0x7e, 0xb6, 0xbb, 0xa8,
    0xb8, 0xa8, 0xb8, 0x55, 0xb9, 0xd6, 0x7f, 0x7b, 0x3d, 0x10, 0xbf, 0xb6, 0x6f, 0x7f, 0xa9, 0xdc,
    0x7f, 0x5e, 0x6f, 0xbe, 0xf7, 0x39, 0xc2, 0xed, 0xc7, 0xcd, 0xf0, 0xc6, 0x57, 0xee, 0xed, 0xfe,
    0xd7, 0xa1, 0xf3, 0x24, 0x1e, 0xd7, 0x72, 0xd7, 0x7f, 0x7b, 0x79, 0x96, 0x7b, 0xd5, 0xf9, 0xf5,
    0xa2, 0xe2, 0xf2, 0xbe, 0x2e, 0x7f, 0xc7, 0xf9, 0xdb, 0x2f, 0x3d, 0xdb, 0xb2, 0xea, 0xbd, 0x54,
    0x6f, 0xfc, 0xbe, 0x9d, 0xf5, 0xff, 0x2c, 0xff, 0xd8, 0x7f, 0xc3, 0xe8, 0xd5, 0xfa, 0x3f, 0xfe,
    0x5a, 0x2a, 0xff, 0x39, 0xcd, 0x9e, 0x63, 0x2f, 0x2a, 0xde, 0xee, 0x75, 0xd9, 0xae, 0xc6, 0x72,
    0xed, 0xc7, 0xfa, 0xe3, 0x2b, 0xcf, 0xb2, 0xee, 0x77, 0x84, 0x7b, 0xcb, 0xfb, 0x3f, 0xb4, 0x7d,
    0xfe, 0xe5, 0x27, 0x1c, 0xdd, 0x2f, 0x85, 0xfb, 0x17, 0xe4, 0xae, 0x5e, 0x11, 0x18, 0x36, 0xe3,
    0x8f, 0x57, 0xf9, 0x58, 0x7b, 0xbb, 0xa7, 0x56, 0xeb, 0xb5, 0x14, 0x15, 0xcf, 0x47, 0xfd, 0xd6,
    0x9b, 0x97, 0x7b, 0x2b, 0x0b, 0x8c, 0x75, 0x1a, 0xba, 0x7f, 0x35, 0xee, 0x03, 0xed, 0x3d, 0x1a,
    0xe7, 0x5c, 0xbf, 0x3d, 0xa6, 0x0b, 0x44, 0x5f, 0x54, 0x2c, 0xd1, 0x86, 0xfd, 0xfb, 0x71, 0x5e,
    0xf4, 0xeb, 0xf2, 0xe3, 0xe3, 0xe3, 0xf3, 0xaa, 0x78, 0x97, 0xbc, 0xdd, 0xe0, 0xff, 0x3f, 0xa8,
    0xfd, 0x70, 0x34, 0xdb, 0xb0, 0x07, 0xdc, 0xcb, 0x3f, 0xf7, 0xc6, 0x23, 0xd2, 0xf5, 0x69, 0x17,
    0x15, 0x03, 0x35, 0x96, 0x4f, 0xf5, 0x06, 0xe8, 0x81, 0x44, 0x40, 0x7f, 0x9e, 0xbf, 0xf2, 0xe8,
    0xed, 0x45, 0xa2, 0xaf, 0xdc, 0x8d, 0x04, 0x9d, 0xe5, 0x7c, 0xe2, 0xa5, 0xc6, 0x8d, 0x7d, 0x3e,
    0x96, 0x2d, 0xdc, 0xb7, 0x6e, 0xa3, 0xfd, 0xa2, 0x62, 0xe0, 0x17, 0xf7, 0xd2, 0xbc, 0x75, 0x6a,
    0x9a, 0xea, 0x75, 0x54, 0xb5, 0x96, 0x7f, 0x37, 0xb1, 0x76, 0x9e, 0x62, 0x55, 0xb2, 0x72, 0x2d,
    0xe7, 0x1d, 0x8d, 0xbc, 0x14, 0xe4, 0x1d, 0xcf, 0x4b, 0x65, 0xdf, 0xa2, 0xc9, 0x17, 0xd8, 0xce,
    0x7d, 0xde, 0x0f, 0x43, 0x3f, 0xd4, 0xfd, 0xd1, 0x7e, 0x6f, 0x8f, 0x70, 0x97, 0x85, 0xf7, 0x9f,
    0x44, 0x8f, 0x9e, 0xfe, 0x23, 0x09, 0xa6, 0x83, 0xc9, 0x24, 0x33, 0x27, 0x2b, 0xd4, 0xa2, 0xe2,
    0xfe, 0x23, 0x55, 0x27, 0x96, 0xea, 0x0e, 0x6b, 0xb4, 0xdf, 0xbe, 0x4b, 0x8b, 0xd5, 0x9d, 0x9d,
    0x9b, 0xff, 0x73, 0x72, 0x27, 0xd1, 0x39, 0xdf, 0xfe, 0x73, 0x54, 0xe7, 0xa7, 0x4a, 0xf9, 0xdf,
    0xa3, 0x7a, 0x5e, 0x6b, 0x05, 0xe5, 0x1d, 0x55, 0x9e, 0xed, 0x69, 0x78, 0xd4, 0x7f, 0xbd, 0x97,
    0x7f, 0x1f, 0x8d, 0xbd, 0xae, 0xb7, 0xa3, 0xfd, 0xc4, 0x56, 0xca, 0x34, 0x1d, 0xe8, 0x8d, 0x15,
    0x2b, 0xd6, 0x6f, 0xb7, 0xc6, 0x9d, 0xd6, 0xef, 0xa6, 0xfc, 0x56, 0x94, 0x41, 0xfb, 0x27, 0x75,
    0xba, 0x21, 0xf6, 0x8e, 0x5a, 0x3f, 0x6a, 0x62, 0xeb, 0xed, 0xa5, 0xbe, 0x9d, 0xa8, 0x9a, 0xf1,
    0x6e, 0x37, 0xcc, 0x1f, 0x65, 0x9c, 0xdc, 0x7f, 0x5b, 0x1f, 0xec, 0x83, 0x8f, 0x0d, 0x3a, 0xcb,
    0x1d, 0xde, 0xa8, 0x7e, 0xd6, 0x5f, 0xda, 0x6e, 0xfa, 0x1c, 0xaa, 0x1b, 0xee, 0x0f, 0xaf, 0xe7,
    0xd0, 0xab, 0x53, 0xef, 0xe7, 0xf0, 0x69, 0x6d, 0x45, 0x79, 0x7f, 0xab, 0x33, 0x8e, 0xfa, 0x0e,
    0x43, 0xa3, 0x7e, 0x35, 0xef, 0x7c, 0xed, 0x3f, 0xe8, 0x8d, 0x5e, 0x91, 0x77, 0xf8, 0xf6, 0x92,
    0xc7, 0x9d, 0x30, 0x71, 0x2f, 0x45, 0xc5, 0x66, 0x01, 0xb4, 0xc0, 0xe9, 0x68, 0x3f, 0x60, 0xf2,
    0x65, 0xe5, 0xee, 0xa0, 0xed, 0x41, 0x51, 0x71, 0x1b, 0x37, 0xbf, 0xff, 0x20, 0xef, 0xbf, 0xa7,
    0x54, 0x2d, 0x56, 0xe7, 0xfd, 0xf1, 0x2f, 0x9d, 0xcf, 0xa2, 0x57, 0x97, 0x11, 0x4b, 0xb8, 0xab,
    0x23, 0xd4, 0xfe, 0xbc, 0xf3, 0xc4, 0xce, 0x64, 0x47, 0x6c, 0xfb, 0x5e, 0x96, 0xc9, 0xae, 0x88,
    0x59, 0xf9, 0x20, 0x66, 0x37, 0xd9, 0xe9, 0x40, 0xea, 0x0c, 0xf4, 0x93, 0xf6, 0x73, 0x3f, 0xae,
    0x79, 0xb5, 0xce, 0xd7, 0x5f, 0xd9, 0x5d, 0xc2, 0xb8, 0xa7, 0x61, 0xe4, 0xfd, 0x96, 0xdf, 0x77,
    0x98, 0xc0, 0x9c, 0x5d, 0xfe, 0xf8, 0x97, 0x49, 0xd6, 0xed, 0x2e, 0xef, 0xd0, 0x5f, 0xcf, 0x2f,
    0x48, 0x14, 0xa1, 0x31, 0xee, 0x54, 0x77, 0x38, 0xfb, 0x81, 0x08, 0x75, 0x8c, 0xf4, 0x10, 0xa6,
    0x07, 0xef, 0xd3, 0xe0, 0xc6, 0x82, 0x61, 0xc6, 0x30, 0xd0, 0xc1, 0x12, 0x1e, 0x58, 0xed, 0xf5,
    0x50, 0x72, 0x8d, 0x32, 0x90, 0x61, 0x98, 0x0c, 0x50, 0xa0, 0x07, 0x29, 0x33, 0xdc, 0xe9, 0x40,
    0x87, 0x61, 0x95, 0xca, 0xf3, 0x09, 0xfe, 0xf0, 0x3e, 0xca, 0xcf, 0x96, 0x60, 0x55, 0x38, 0x50,
    0xc2, 0x20, 0x0f, 0x3e, 0x0c, 0xef, 0x03, 0x31, 0x0c, 0x97, 0x01, 0x0b, 0xd2, 0xf6, 0x68, 0x64,
    0xa3, 0x32, 0x6f, 0x8d, 0x4a, 0xb8, 0x67, 0xab, 0xdb, 0x14, 0x50, 0x02, 0xef, 0x70, 0x7b, 0xca,
    0xcf, 0x82, 0xe5, 0x9f, 0x74, 0x6f, 0xeb, 0x7e, 0x04, 0x89, 0x80, 0x08, 0xe5, 0x15, 0xf0, 0x79,
    0x73, 0xb0, 0xd7, 0xb6, 0xe2, 0x3d, 0x3a, 0xea, 0x8f, 0x13, 0x87, 0x83, 0xc4, 0x76, 0xfe, 0x0f,
    0x13, 0xdb, 0xad, 0xcd, 0x69, 0x3e, 0xaf, 0xab, 0xd6, 0x99, 0xd9, 0xcf, 0x9e, 0xf8, 0x85, 0x8d,
    0x8d, 0x1a, 0xa5, 0xdb, 0x6e, 0xb9, 0x45, 0x39, 0xc5, 0x42, 0x13, 0xe4, 0x3e, 0xd7, 0xb1, 0xda,
    0xe3, 0xbc, 0x7a, 0xfd, 0xa8, 0x6f, 0xa7, 0xd5, 0x49, 0x1c, 0xbe, 0xf9, 0x58, 0x4f, 0x88, 0xce,
    0xf7, 0x7d, 0x40, 0x1d, 0x2b, 0x83, 0x74, 0xf2, 0x65, 0xed, 0xe3, 0x69, 0xac, 0x6b, 0x36, 0xcb,
    0xe8, 0x7c, 0xe6, 0x3a, 0x72, 0x9c, 0xef, 0x27, 0x75, 0xfb, 0xdd, 0x1e, 0xce, 0xd2, 0xdf, 0xb7,
    0xfa, 0x27, 0x76, 0xb7, 0x70, 0x8a, 0x56, 0xc5, 0xf9, 0xfd, 0x31, 0xee, 0x7f, 0x6d, 0x7e, 0x7b,
    0x3f, 0xa4, 0xed, 0xe2, 0x04, 0xa1, 0xf9, 0xdd, 0xa4, 0x28, 0x6f, 0x7f, 0x30, 0xce, 0x07, 0x77,
    0x9e, 0xab, 0x15, 0x13, 0xa7, 0x3e, 0x47, 0x46, 0xe9, 0x76, 0xc6, 0xad, 0x41, 0x37, 0xff, 0xa7,
    0x6c, 0xd7, 0xad, 0x64, 0xac, 0xf3, 0x51, 0x66, 0x9b, 0x9f, 0xd2, 0xed, 0xb4, 0x06, 0xbd, 0xd4,
    0xce, 0xb8, 0x0d, 0xd6, 0x78, 0x6f, 0xdf, 0x18, 0x8c, 0x79, 0x7e, 0x18, 0xdd, 0x7e, 0xeb, 0x4d,
    0x1e, 0xf7, 0x86, 0xf9, 0x7f, 0xb4, 0xcf, 0xdb, 0x72, 0x39, 0x2f, 0xa3, 0x6e, 0xa7, 0x27, 0xfe,
    0xa5, 0x56, 0x95, 0x93, 0x4e, 0xb7, 0xfd, 0xf6, 0x46, 0x9d, 0x71, 0xaf, 0x15, 0x22, 0x2e, 0xc7,
    0xa2, 0x26, 0x0e, 0xfa, 0x06, 0xce, 0xed, 0xd6, 0xdb, 0xe9, 0xc1, 0x1c, 0x53, 0x71, 0x1e, 0xbd,
    0xfd, 0x3e, 0xe3, 0xdb, 0xad, 0xd5, 0xec, 0x8c, 0x51, 0xde, 0xd4, 0x71, 0xa7, 0x37, 0xee, 0x0c,
    0xbb, 0x26, 0xc7, 0x53, 0x50, 0xff, 0x68, 0xd0, 0x1e, 0xa1, 0xfc, 0xc7, 0x7f, 0x9f, 0x75, 0xbf,
    0xcf, 0xbe, 0xdb, 0x9d, 0xc1, 0x48, 0x60, 0xc8, 0x37, 0xb4, 0xde, 0xb8, 0x6f, 0xf7, 0xb6, 0xef,
    0x2d, 0xc2, 0x73, 0x2c, 0x10, 0x8d, 0x48, 0x3a, 0x9f, 0x70, 0x50, 0xb9, 0xc4, 0x1f, 0xff, 0xa8,
    0xba, 0xce, 0xe7, 0x5d, 0x7e, 0x0e, 0xc1, 0x63, 0x63, 0x84, 0x2e, 0x9a, 0x36, 0x7e, 0x35, 0x7e,
    0xc7, 0xa9, 0xf7, 0xf8, 0xc3, 0xd9, 0x38, 0xea, 0xe6, 0x6b, 0x3c, 0xad, 0x5f, 0xd5, 0x2a, 0xdf,
    0x65, 0xf4, 0x94, 0x16, 0x98, 0x32, 0x8a, 0xa9, 0x7f, 0x5c, 0x6e, 0x3e, 0xeb, 0xfa, 0xd4, 0x77,
    0xa1, 0x47, 0xb0, 0x0a, 0xf7, 0xfb, 0x8f, 0xd5, 0x5e, 0x2d, 0xc7, 0x12, 0x9f, 0x6f, 0x2a, 0xf1,
    0x3e, 0xd7, 0x89, 0xf5, 0xf3, 0x7f, 0xf2, 0xbd, 0xae, 0xf7, 0x41, 0xfb, 0xe6, 0x2b, 0xaa, 0x19,
    0x2f, 0xf4, 0xf6, 0x75, 0xbe, 0xbd, 0x32, 0xc7, 0xb4, 0x47, 0x6f, 0xef, 0x15, 0xf2, 0x09, 0x91,
    0x25, 0x2c, 0x96, 0x02, 0x5d, 0x61, 0x2c, 0x40, 0x15, 0x15, 0x5b, 0x1a, 0x43, 0x65, 0x53, 0xb6,
    0xe7, 0x68, 0x5c, 0x6b, 0x63, 0x87, 0x7f, 0x52, 0x9f, 0xed, 0xd0, 0x0f, 0xef, 0x7e, 0x71, 0xfc,
    0x6d, 0xb2, 0x17, 0x29, 0xf5, 0x53, 0x61, 0x76, 0x29, 0xc9, 0xfb, 0x91, 0x2b, 0xbb, 0x66, 0x8c,
    0x65, 0xec, 0x1d, 0xe2, 0x36, 0xaf, 0x4f, 0x71, 0xde, 0xef, 0x3d, 0xe1, 0x10, 0xd7, 0x35, 0x1e,
    0xf7, 0x97, 0x21, 0xb6, 0x94, 0x3a, 0xec, 0x37, 0x78, 0xe7, 0xa3, 0x46, 0xbf, 0xf5, 0xb5, 0x6e,
    0xeb, 0x7d, 0xd6, 0x50, 0x8f, 0xe8, 0xef, 0x1c, 0xfe, 0xa7, 0x81, 0x5c, 0xa8, 0x15, 0xc7, 0x6f,
    0x28, 0x65, 0x8f, 0xc0, 0x99, 0x84, 0x38, 0xdc, 0x91, 0x51, 0x3c, 0x67, 0xa8, 0x13, 0x5a, 0xb9,
    0x8d, 0xbd, 0x7c, 0x7f, 0x06, 0x29, 0x0d, 0x5a, 0xe3, 0xda, 0x7c, 0x9e, 0xe1, 0xfe, 0x5c, 0x92,
    0x0b, 0xf3, 0xbf, 0x96, 0x56, 0x37, 0xff, 0x23, 0x44, 0x77, 0xcb, 0xd1, 0x5b, 0xc6, 0x2f, 0x99,
    0xf4, 0x8c, 0xa8, 0x34, 0xfe, 0x3e, 0x23, 0x08, 0xee, 0xa8, 0xbe, 0xda, 0x26, 0x9b, 0x57, 0x49,
    0xf3, 0xae, 0xe7, 0x9b, 0x35, 0x85, 0x3f, 0x3c, 0xc5, 0x58, 0x8c, 0xe2, 0xdf, 0xee, 0xf3, 0xba,
    0x6b, 0xbf, 0x3c, 0x37, 0xf4, 0xe5, 0x3e, 0x47, 0xc2, 0x0a, 0x7c, 0x6e, 0x5e, 0x8b, 0x7b, 0xb7,
    0x41, 0xd1, 0xe7, 0x0b, 0x39, 0xd7, 0xff, 0xe0, 0x33, 0x68, 0xaf, 0x57, 0x23, 0xc1, 0x44, 0x7e,
    0xf9, 0x15, 0x09, 0xed, 0x85, 0x66, 0x88, 0x28, 0xb6, 0x72, 0x51, 0xa4, 0x56, 0x9e, 0xfa, 0x0f,
    0xd9, 0x7c, 0x79, 0x6c, 0x0f, 0xe5, 0xad, 0x4e, 0xdf, 0x30, 0x2f, 0xe9, 0x07, 0x7d, 0xb3, 0x89,
    0x5d, 0x97, 0x6b, 0xd3, 0xf4, 0xaf, 0xd2, 0x15, 0xfc, 0x3e, 0x4f, 0x6a, 0xf1, 0x7d, 0xaf, 0xff,
    0xe3, 0xa2, 0xf2, 0xce, 0xf3, 0x96, 0xa4, 0xbe, 0x6b, 0xd5, 0xb0, 0x3f, 0xca, 0xbe, 0x79, 0x3a,
    0x6b, 0xa4, 0x93, 0x9f, 0xad, 0xe1, 0xf5, 0x67, 0x95, 0x78, 0xcb, 0x5e, 0xea, 0x76, 0x45, 0x78,
    0x4e, 0x53, 0x29, 0x65, 0x4a, 0xe9, 0x67, 0x69, 0x54, 0xf8, 0x05, 0x5f, 0x75, 0x9c, 0x6e, 0xd9,
    0x52, 0x78, 0xc2, 0x0d, 0xb4, 0xd7, 0x85, 0x37, 0x31, 0xce, 0x43, 0xb0, 0x35, 0x7c, 0x80, 0xd6,
    0x3d, 0x12, 0x1c, 0xbe, 0xfe, 0xca, 0xf9, 0xb8, 0xa5, 0xe6, 0x4b, 0xd5, 0xa1, 0xf4, 0xce, 0x0a,
    0xf2, 0xcb, 0x9d, 0xd4, 0xd3, 0xd5, 0x3c, 0x4f, 0x57, 0x69, 0xfe, 0xee, 0xde, 0xae, 0x6e, 0xd0,
    0xe2, 0x75, 0xdf, 0xc7, 0xd6, 0xe3, 0x3c, 0xe5, 0x8e, 0x47, 0x5d, 0xbd, 0xcb, 0xf7, 0x41, 0x75,
    0xd3, 0x88, 0x3d, 0xdc, 0x12, 0x16, 0xf5, 0x72, 0x6e, 0xf5, 0x69, 0x42, 0x79, 0x84, 0xac, 0x77,
    0xcd, 0x33, 0x8f, 0x67, 0xec, 0x54, 0x04, 0x79, 0x03, 0xe7, 0x2b, 0xa8, 0xef, 0x7c, 0x5d, 0xe1,
    0xbb, 0x40, 0x0f, 0x2e, 0x98, 0xbf, 0x12, 0x01, 0xbc, 0xd6, 0x8e, 0x61, 0x2a, 0xb8, 0x63, 0x14,
    0xad, 0xae, 0x64, 0x17, 0xca, 0xbf, 0x71, 0xeb, 0x1f, 0x31, 0xd5, 0x3f, 0xfd, 0x91, 0x22, 0xbe,
    0xe1, 0xaf, 0x25, 0x2f, 0x62, 0xa8, 0x16, 0x43, 0x44, 0xd9, 0xcf, 0xf3, 0xc9, 0xe7, 0x3c, 0x87,
    0x52, 0xba, 0x90, 0x6d, 0x07, 0xbf, 0xe2, 0xbc, 0xe6, 0xdb, 0x75, 0x1d, 0x4a, 0x0c, 0x1b, 0x4a,
    0xca, 0xfb, 0xba, 0xd5, 0x6d, 0x57, 0xae, 0xb2, 0x57, 0x42, 0x4b, 0x86, 0xe6, 0x03, 0x5e, 0x44,
    0x4e, 0x90, 0x3a, 0xa6, 0x85, 0xc4, 0x19, 0x89, 0x2c, 0xff, 0x08, 0xaf, 0x30, 0x15, 0xe0, 0x6a,
    0xf5, 0x3f, 0x25, 0x68, 0xb1, 0x2e, 0x9d, 0xa7, 0x4a, 0xa1, 0x76, 0xd9, 0x9d, 0x17, 0x51, 0x1f,
    0x31, 0xd0, 0xe4, 0x79, 0xd5, 0x33, 0x36, 0xe0, 0xb6, 0xc2, 0x18, 0xc5, 0x7e, 0x98, 0xe7, 0xbc,
    0x3e, 0xe1, 0x56, 0xd9, 0x50, 0x02, 0xad, 0xcd, 0x99, 0x57, 0x1a, 0xd7, 0xbf, 0x06, 0xe7, 0xfc,
    0xac, 0xe1, 0x74, 0x83, 0xe3, 0x9d, 0x85, 0x43, 0x72, 0x8d, 0x1b, 0x6f, 0xb2, 0xf8, 0x29, 0x2a,
    0x5e, 0xac, 0x62, 0x30, 0xdc, 0xa2, 0xcf, 0xbf, 0xb5, 0x4b, 0xf9, 0xe3, 0xf3, 0xb8, 0xbe, 0xdd,
    0x0f, 0x1e, 0xa7, 0xab, 0xcd, 0x4a, 0xe1, 0x54, 0xce, 0x5e, 0x63, 0xe6, 0xfa, 0xd4, 0x4b, 0x8b,
    0xb1, 0xab, 0xea, 0xc4, 0x6a, 0x2a, 0xe5, 0x8c, 0xf6, 0x2d, 0xb9, 0xe5, 0x7c, 0x9f, 0x13, 0xd3,
    0x6d, 0x64, 0x7b, 0x4e, 0x67, 0x9c, 0x18, 0xac, 0x10, 0xf7, 0x4c, 0xf9, 0x3a, 0x66, 0x5a, 0x56,
    0x77, 0x86, 0x15, 0xfb, 0x3d, 0x90, 0xef, 0x96, 0x57, 0xff, 0xaf, 0x9a, 0x4b, 0x8b, 0xcc, 0xab,
    0xd5, 0x3f, 0xdb, 0x45, 0xc7, 0xaa, 0xa6, 0xeb, 0x28, 0x37, 0x18, 0x2b, 0x2c, 0x7f, 0x13, 0xe5,
    0x4e, 0xbd, 0xdc, 0xe1, 0x6e, 0x20, 0xfe, 0xb8, 0xa1, 0x84, 0xfc, 0x26, 0x50, 0xbf, 0x97, 0x5a,
    0x9a, 0xb7, 0xb8, 0x35, 0xaf, 0x4c, 0xfe, 0x8b, 0xc2, 0x03, 0xd5, 0x05, 0x69, 0xc6, 0x28, 0x7b,
    0x17, 0xa2, 0x0d, 0xc0, 0xbc, 0x4e, 0x6e, 0xae, 0xc0, 0xbc, 0x72, 0x9d, 0xb7, 0x61, 0x9b, 0xae,
    0xeb, 0xb8, 0x77, 0x1b, 0xad, 0x3e, 0xb3, 0xb3, 0xd9, 0xeb, 0xb4, 0x74, 0x8c, 0xf8, 0x57, 0xbf,
    0x19, 0x95, 0xed, 0x75, 0xb7, 0x66, 0x74, 0xb9, 0x6a, 0xd7, 0xcd, 0x5c, 0xba, 0xba, 0x94, 0xd7,
    0x65, 0xdf, 0x54, 0x6a, 0x99, 0xec, 0x8f, 0xbf, 0x85, 0xad, 0xe0, 0x2f, 0x2b, 0x77, 0x51, 0xba,
    0x21, 0xb1, 0x5c, 0xaf, 0x17, 0xd7, 0xa3, 0xb2, 0x72, 0x0c, 0xb3, 0xf2, 0x62, 0x19, 0xd8, 0x7f,
    0x56, 0x92, 0x73, 0x79, 0x99, 0x70, 0x63, 0x76, 0xa8, 0x1f, 0x79, 0x7a, 0x50, 0xdf, 0xc8, 0x95,
    0x9b, 0xc2, 0x2a, 0x5c, 0xf7, 0xa1, 0xed, 0x25, 0xb8, 0xbb, 0x7b, 0x7d, 0x94, 0x64, 0xc7, 0xab,
    0xfa, 0xc7, 0xab, 0xfe, 0x5f, 0xdb, 0xf6, 0x32, 0x53, 0xd5, 0x8e, 0xf7, 0x8e, 0xd1, 0x8d, 0xe2,
    0xef, 0x5c, 0xa6, 0xc9, 0x3f, 0x4f, 0xb5, 0xe1, 0x68, 0xe6, 0x93, 0xbd, 0xa4, 0xfd, 0xac, 0xf8,
    0x01, 0x5f, 0x65, 0x1e, 0xf3, 0xec, 0x08, 0xc6, 0x3f, 0xb2, 0x38, 0x33, 0xaa, 0x56, 0x21, 0xe9,
    0x6d, 0xce, 0x9b, 0xa6, 0x56, 0xb5, 0xc0, 0x2e, 0x4e, 0xca, 0xe1, 0x38, 0x8c, 0x1a, 0x3b, 0x11,
    0x8a, 0x3d, 0x9d, 0xb2, 0x87, 0xc4, 0x07, 0x8e, 0x0b, 0x89, 0x3d, 0xee, 0x00, 0x3d, 0x90, 0x08,
    0x58, 0xf8, 0x23, 0x22, 0xe9, 0x26, 0xf3, 0xc6, 0x77, 0xde, 0xd0, 0x2b, 0x36, 0x66, 0xf7, 0x5a,
    0xcd, 0xd0, 0xa8, 0x2c, 0x73, 0x4f, 0xaa, 0x2e, 0x68, 0x99, 0x55, 0xa0, 0x4c, 0x62, 0xe3, 0x51,
    0x2b, 0xfb, 0x2a, 0x6c, 0xc1, 0x07, 0xb4, 0x42, 0x5b, 0x74, 0x6a, 0x57, 0x75, 0xde, 0x70, 0xff,
    0x79, 0x25, 0x58, 0xe8, 0x14, 0xa7, 0x69, 0xdd, 0x26, 0xac, 0xe1, 0xc3, 0x5b, 0x15, 0x31, 0x5a,
    0xf4, 0xad, 0xae, 0x0d, 0xd7, 0xf0, 0xb3, 0x05, 0x23, 0x90, 0x88, 0xeb, 0x79, 0x94, 0x5c, 0x87,
    0xef, 0x09, 0xab, 0xd4, 0xea, 0xe3, 0x87, 0xfb, 0x78, 0x88, 0x13, 0x75, 0x13, 0xe8, 0x0e, 0x93,
    0x49, 0x4e, 0x86, 0xd5, 0x2b, 0xf6, 0xd2, 0x6d, 0x33, 0xe3, 0x67, 0xdb, 0x76, 0x6c, 0xda, 0x78,
    0xdb, 0x9b, 0x9a, 0x9a, 0x4c, 0x56, 0x83, 0x9c, 0x1d, 0x8e, 0x52, 0xf5, 0x63, 0x5e, 0x6f, 0xfc,
    0x3e, 0x9f, 0xe8, 0xb4, 0x1a, 0xed, 0x1d, 0xfd, 0xdd, 0x3d, 0x07, 0x87, 0x13, 0xbc, 0xba, 0x87,
    0x00, 0x0c, 0x0c, 0x62, 0x8c, 0xf8, 0xba, 0xd0, 0xaf, 0xf0, 0x95, 0x79, 0x9d, 0xb7, 0x12, 0x51,
    0x77, 0x21, 0x77, 0xf5, 0x2a, 0xa3, 0x3a, 0x01, 0xf6, 0x65, 0xaf, 0xde, 0x1a, 0xdc, 0x10, 0xad,
    0xa8, 0x59, 0xb2, 0x5f, 0x7b, 0x2e, 0xa8, 0xe9, 0xb3, 0xf9, 0x2f, 0x5e, 0x72, 0x30, 0x6a, 0xfc,
    0xb0, 0x97, 0x27, 0x4f, 0x08, 0x59, 0xec, 0x70, 0x90, 0x2f, 0x5e, 0x4e, 0x1a, 0xea, 0xc5, 0x53,
    0x08, 0xda, 0x38, 0xc4, 0x57, 0xe3, 0x1a, 0xfa, 0xc5, 0xdf, 0xa6, 0x79, 0x25, 0xc4, 0x7f, 0x6a,
    0x38, 0xf9, 0x94, 0x01, 0x27, 0xf7, 0x67, 0xab, 0xde, 0x3e, 0x69, 0x8e, 0x8a, 0xf3, 0xe0, 0x16,
    0x3d, 0xd4, 0xa6, 0xcb, 0x11, 0x8d, 0xef, 0x3a, 0x85, 0x07, 0xbf, 0x11, 0x72, 0x9c, 0xda, 0x26,
    0x7c, 0x32, 0xd5, 0x8f, 0x07, 0xdf, 0x06, 0x4d, 0x84, 0xf4, 0xc3, 0x85, 0x12, 0xf6, 0xce, 0x67,
    0xb8, 0x43, 0x89, 0x7e, 0xc8, 0x50, 0x22, 0x9a, 0x04, 0x3f, 0x95, 0xd2, 0x84, 0xd9, 0x28, 0x5a,
    0xc5, 0x8e, 0xe7, 0x3b, 0x12, 0x54, 0xc9, 0x15, 0x49, 0x29, 0x20, 0x0a, 0x9c, 0x33, 0x4c, 0x1a,
    0xb6, 0x29, 0x0e, 0x25, 0xb9, 0x1c, 0x01, 0xfb, 0x72, 0xf3, 0xbc, 0xfd, 0x9e, 0x53, 0x22, 0xb4,
    0xf4, 0x9c, 0x40, 0xd9, 0x15, 0xf2, 0x41, 0x20, 0xd8, 0xab, 0x23, 0x6d, 0xa7, 0x6c, 0x22, 0xf4,
    0x73, 0x78, 0x59, 0x12, 0xe2, 0xa8, 0x65, 0x0a, 0xd5, 0x0e, 0x7a, 0xf7, 0xc3, 0xcb, 0x29, 0x96,
    0x81, 0x4c, 0x55, 0xb7, 0xad, 0xa6, 0x1f, 0x75, 0xd7, 0x51, 0x1f, 0x78, 0xda, 0xb3, 0x7a, 0x05,
    0xbe, 0x08, 0x5b, 0xc6, 0x74, 0xb7, 0xb7, 0xbb, 0xcf, 0x8b, 0x6a, 0x30, 0x09, 0xfe, 0x0b, 0x66,
    0x43, 0xd9, 0xb6, 0x95, 0x26, 0xda, 0x11, 0xc0, 0xad, 0xa2, 0xf0, 0xf7, 0xb0, 0xaa, 0x94, 0x83,
    0x3b, 0x53, 0xda, 0xf5, 0x29, 0x98, 0x4e, 0x00, 0xe7, 0xa7, 0x23, 0x57, 0x84, 0x68, 0x8d, 0x18,
    0x61, 0xbd, 0x9c, 0x5e, 0x2c, 0x89, 0x0b, 0xbf, 0xf1, 0x00, 0x7a, 0xee, 0x6f, 0x8e, 0x5b, 0xce,
    0x7a, 0x2b, 0xe3, 0x8b, 0xb9, 0x21, 0xa5, 0xec, 0x47, 0x51, 0x31, 0x83, 0x13, 0x56, 0x5c, 0x2b,
    0xd4, 0x1b, 0x9b, 0xbd, 0xb6, 0x55, 0x15, 0x77, 0x7d, 0x8e, 0x01, 0xbd, 0x36, 0x4d, 0xcd, 0x06,
    0x23, 0x33, 0xde, 0x16, 0x4e, 0xe3, 0x0f, 0x3a, 0x3d, 0x5e, 0x9f, 0xc2, 0xaa, 0xae, 0xd6, 0x5b,
    0x93, 0x9e, 0x47, 0xf2, 0x13, 0x11, 0x16, 0xfe, 0xf8, 0xee, 0x27, 0x94, 0x99, 0x55, 0x9c, 0x12,
    0xfd, 0xe5, 0xbc, 0xeb, 0x98, 0x46, 0x15, 0x38, 0x3f, 0x0d, 0xc7, 0x7c, 0xa7, 0xf6, 0x7c, 0x91,
    0xab, 0x65, 0x2f, 0xf5, 0x16, 0xce, 0xf7, 0x6f, 0x55, 0x0f, 0x1a, 0xcf, 0x28, 0xbe, 0x11, 0x42,
    0x9e, 0x69, 0xd2, 0x21, 0x34, 0x97, 0x4b, 0xff, 0xf1, 0x6e, 0xd5, 0x70, 0xab, 0x29, 0x48, 0x3e,
    0xb7, 0x61, 0x85, 0xf0, 0x72, 0x3d, 0x27, 0x74, 0xad, 0x16, 0xab, 0x21, 0x5b, 0xfb, 0xc3, 0x66,
    0xf1, 0x08, 0xe5, 0x5f, 0x2d, 0xf4, 0x48, 0x46, 0xa4, 0x78, 0x88, 0x9d, 0xad, 0x57, 0x63, 0x3e,
    0x31, 0xac, 0xec, 0x94, 0xcc, 0xe2, 0xe9, 0xd9, 0x37, 0x1b, 0xb1, 0x09, 0x87, 0x7a, 0x66, 0x09,
    0x46, 0x3f, 0x15, 0xb6, 0xf6, 0xc0, 0x88, 0xb8, 0xf4, 0xca, 0x68, 0xdb, 0x83, 0x7f, 0xe9, 0xc6,
    0x11, 0xea, 0x5e, 0xba, 0x0e, 0x3f, 0x6f, 0x53, 0xbb, 0x28, 0xd9, 0xbd, 0x0e, 0xe4, 0x4f, 0x9f,
    0xa5, 0x9e, 0xfc, 0x7b, 0x9b, 0x4b, 0xc2, 0x5e, 0x7c, 0x3f, 0xca, 0xf6, 0x5a, 0x16, 0x81, 0x86,
    0x45, 0x75, 0x10, 0x03, 0x1d, 0xbb, 0xba, 0xe8, 0x4a, 0xd0, 0x5e, 0x94, 0xac, 0x1a, 0xc8, 0xad,
    0xa0, 0x5b, 0x6a, 0xb3, 0xae, 0xaa, 0x66, 0xc3, 0x39, 0x47, 0x51, 0x35, 0x4d, 0x8f, 0xaa, 0xb1,
    0x65, 0x44, 0x64, 0x9a, 0xab, 0x0a, 0x53, 0x3d, 0x54, 0xb7, 0x01, 0x74, 0xa5, 0xe1, 0xbe, 0xec,
    0xd7, 0x29, 0x95, 0x5e, 0xe7, 0x26, 0x2a, 0x2a, 0x40, 0xaa, 0xc5, 0x69, 0x3d, 0xa0, 0x78, 0x1a,
    0xaf, 0xfb, 0x57, 0xd4, 0x6c, 0xdd, 0x5e, 0x5f, 0x27, 0x57, 0x35, 0xca, 0xe2, 0x76, 0x7b, 0x42,
    0xea, 0x90, 0x37, 0x58, 0xb0, 0x7b, 0x6e, 0xa8, 0xd7, 0xaa, 0x7a, 0x55, 0x0f, 0x8c, 0x0a, 0xc6,
    0x5b, 0x54, 0x7c, 0x95, 0x4b, 0xa7, 0xbe, 0xb0, 0x7a, 0x08, 0xc7, 0xfb, 0x58, 0x8d, 0xac, 0x79,
    0xb1, 0xf9, 0x4a, 0x88, 0x61, 0x9e, 0xb5, 0x72, 0x95, 0xe2, 0x37, 0x13, 0x2d, 0x9a, 0xc2, 0x38,
    0xf2, 0xca, 0xe4, 0xe7, 0x59, 0x75, 0xb8, 0x0f, 0xf7, 0x9b, 0xd2, 0x77, 0xfd, 0x8a, 0x70, 0xd5,
    0x75, 0xd3, 0x6d, 0x6e, 0xc1, 0x52, 0x71, 0x28, 0xbd, 0x28, 0xf0, 0xbe, 0xef, 0x04, 0x1d, 0x5b,
    0x65, 0x7c, 0x37, 0x7d, 0xed, 0x62, 0xea, 0xcd, 0x97, 0xea, 0xa0, 0x2b, 0x6a, 0xea, 0xfd, 0xa0,
    0x3a, 0x73, 0xf1, 0xf2, 0x87, 0x3b, 0x5c, 0x06, 0x38, 0xa8, 0x93, 0xe6, 0x10, 0xda, 0xaf, 0x63,
    0x99, 0x9e, 0x4f, 0x13, 0xa7, 0x36, 0xb3, 0x55, 0xe7, 0xc1, 0xfe, 0xd1, 0x3c, 0x78, 0x25, 0xdd,
    0x2a, 0xb8, 0x2e, 0xfc, 0x6d, 0xfb, 0x0d, 0x92, 0xe3, 0xd9, 0x29, 0xeb, 0x0a, 0x11, 0x2d, 0x9f,
    0xcb, 0x20, 0x18, 0xb1, 0x32, 0xfe, 0x2e, 0xc8, 0x2e, 0x3a, 0x64, 0x1b, 0xdb, 0xfb, 0x38, 0x6f,
    0x36, 0x71, 0x9c, 0x8c, 0x2d, 0x7f, 0x9c, 0xf8, 0x89, 0xda, 0x35, 0xf6, 0x9b, 0x8f, 0xe3, 0x17,
    0xa0, 0x7b, 0x95, 0x1f, 0xaf, 0xac, 0xa8, 0x5d, 0x60, 0xb1, 0x08, 0xb1, 0x8c, 0x42, 0xc2, 0x97,
    0xf3, 0x70, 0x1a, 0xf9, 0x91, 0xa3, 0x77, 0x65, 0x73, 0x63, 0x91, 0x65, 0x81, 0xa9, 0x39, 0x7f,
    0x06, 0xb9, 0x87, 0x4f, 0xbd, 0x92, 0x52, 0x28, 0xb3, 0x96, 0xed, 0x76, 0xfb, 0x25, 0x9c, 0x3c,
    0x01, 0xf1, 0x61, 0xab, 0x6d, 0xc2, 0x0f, 0x52, 0xfa, 0x2e, 0xcf, 0xc8, 0xa4, 0xf0, 0xfc, 0xfa,
    0x2d, 0x4a, 0x2e, 0xf4, 0xe3, 0xd6, 0xef, 0x92, 0xf0, 0x6a, 0xe2, 0x35, 0x18, 0xf9, 0xc7, 0x22,
    0x99, 0x26, 0x0d, 0x65, 0x61, 0x7f, 0xb1, 0x66, 0x4d, 0xa0, 0xc5, 0x81, 0xd9, 0x95, 0x84, 0xa3,
    0x2b, 0x55, 0x95, 0xff, 0x2b, 0xc7, 0xd8, 0xac, 0x87, 0x1c, 0x8c, 0xb2, 0x9a, 0xdf, 0x77, 0x59,
    0xd4, 0xf3, 0x55, 0x96, 0xfe, 0x92, 0xec, 0x57, 0x1f, 0xca, 0x6c, 0xb7, 0xdd, 0x68, 0x30, 0x72,
    0xe5, 0x06, 0x68, 0x59, 0xef, 0xe7, 0xd4, 0x98, 0x19, 0x76, 0x49, 0x1f, 0x71, 0xbe, 0x91, 0x94,
    0x8f, 0x60, 0x95, 0x5b, 0x8a, 0xd2, 0x67, 0x87, 0x5b, 0x3c, 0x46, 0x79, 0x3f, 0x67, 0x1d, 0x5c,
    0x2a, 0xec, 0x6b, 0x53, 0xd7, 0x6e, 0x4d, 0xbd, 0x92, 0x15, 0xe0, 0xf7, 0xe4, 0x27, 0x8e, 0xdc,
    0x3f, 0xde, 0x4a, 0xa0, 0xbb, 0x28, 0x8f, 0xdc, 0x5f, 0x7d, 0x6b, 0xd8, 0xd5, 0x22, 0x74, 0x01,
    0xf0, 0xbb, 0xde, 0x57, 0x48, 0x9d, 0xda, 0x48, 0xf2, 0x0c, 0xcd, 0x47, 0xc8, 0xe6, 0x7b, 0xdb,
    0x21, 0xe3, 0x63, 0x62, 0xd1, 0x5a, 0xc1, 0x26, 0x9d, 0x7c, 0xcb, 0x0e, 0x13, 0x63, 0x42, 0x27,
    0xa5, 0xdb, 0x11, 0x51, 0xa2, 0xea, 0xaf, 0x52, 0xd6, 0x75, 0x07, 0x57, 0x94, 0xab, 0xc1, 0x08,
    0xb1, 0xd5, 0xc3, 0x2e, 0x4a, 0xad, 0x23, 0xcd, 0x3b, 0xb7, 0x94, 0xef, 0xeb, 0x50, 0xdc, 0x17,
    0x04, 0x73, 0x1e, 0x8e, 0x4d, 0x9a, 0x52, 0x88, 0xf6, 0x92, 0xe2, 0x92, 0x93, 0xfa, 0xab, 0xd0,
    0x5f, 0xad, 0x7e, 0x30, 0x42, 0xc8, 0xfa, 0x7e, 0x1a, 0x37, 0x06, 0x5e, 0x1a, 0xbb, 0x03, 0xab,
    0x87, 0x4e, 0x95, 0xc6, 0x2f, 0x06, 0xf5, 0xed, 0x02, 0xcd, 0x7a, 0xe2, 0x14, 0xdc, 0x0d, 0x99,
    0x3d, 0x90, 0xbb, 0x98, 0x3f, 0xfe, 0x4b, 0xfb, 0xb5, 0x20, 0xea, 0x20, 0x86, 0x09, 0x4f, 0x7a,
    0x0a, 0xae, 0x37, 0x72, 0xe8, 0xf0, 0x19, 0x5b, 0x0c, 0x67, 0x34, 0x9f, 0x0f, 0x46, 0xbf, 0x2c,
    0xbc, 0xa9, 0xbd, 0xef, 0x65, 0xc1, 0x12, 0xb6, 0xb2, 0xd3, 0x7b, 0xb6, 0xa7, 0xd6, 0x6b, 0x75,
    0xef, 0xaf, 0x43, 0xa9, 0xbd, 0x26, 0x5c, 0x90, 0x10, 0x8a, 0x12, 0xc5, 0x4c, 0x0c, 0xad, 0x1b,
    0x89, 0x37, 0x9f, 0x05, 0xb6, 0x1b, 0x4e, 0xf4, 0x8c, 0x6d, 0x8f, 0x55, 0x5b, 0x7b, 0xc6, 0xad,
    0x4f, 0x2b, 0x6f, 0x57, 0x88, 0xec, 0xe7, 0x4c, 0x00, 0x19, 0xec, 0x6c, 0xcd, 0xa9, 0xca, 0xf7,
    0x42, 0x30, 0x5e, 0x90, 0x2a, 0xda, 0x4e, 0x6e, 0x70, 0xb1, 0x90, 0x71, 0xdd, 0xda, 0xc1, 0x0f,
    0x87, 0x95, 0x87, 0xb5, 0x5a, 0x7e, 0x1a, 0x08, 0xf2, 0x97, 0xb0, 0x1e, 0x84, 0x12, 0x7d, 0x4a,
    0xbe, 0x10, 0x46, 0xc7, 0xf4, 0x46, 0xea, 0x34, 0x5e, 0xb1, 0x19, 0x35, 0x0f, 0xea, 0xbc, 0xc1,
    0x6c, 0xdb, 0xc1, 0x3a, 0x9f, 0xc2, 0xca, 0xe2, 0x0c, 0x1e, 0xe8, 0x1e, 0xd3, 0x1f, 0x88, 0x1d,
    0x81, 0xaa, 0xbd, 0xb3, 0x01, 0xbb, 0x15, 0x4e, 0x42, 0xc8, 0xec, 0xc0, 0x81, 0x97, 0x23, 0x3b,
    0x9f, 0xeb, 0x23, 0xc1, 0xb5, 0x7b, 0x5a, 0xcb, 0xa9, 0x26, 0x77, 0xf5, 0x5a, 0x3f, 0xdd, 0xc6,
    0x8e, 0xd1, 0x88, 0x65, 0x45, 0xdb, 0x52, 0x9d, 0x4c, 0x19, 0xf1, 0x56, 0xf9, 0xe8, 0x5a, 0xfd,
    0x58, 0xd1, 0x8c, 0x1d, 0xac, 0x48, 0x92, 0x72, 0xf8, 0x8b, 0x1b, 0x0b, 0xd2, 0xeb, 0x66, 0x17,
    0x68, 0x35, 0x83, 0xf2, 0x23, 0x0f, 0x16, 0x5b, 0xbe, 0x57, 0x96, 0xdf, 0xb8, 0x8d, 0xb8, 0x62,
    0x61, 0xd0, 0x7c, 0xf8, 0x16, 0x3b, 0x79, 0x35, 0x52, 0x2b, 0xa6, 0x46, 0xbb, 0x3e, 0x2c, 0x29,
    0xe9, 0xff, 0x29, 0x94, 0x63, 0xa6, 0x77, 0x9b, 0xcb, 0x20, 0x6e, 0x30, 0x10, 0x4a, 0xb6, 0x5a,
    0xf2, 0xe1, 0x84, 0x8a, 0x5e, 0xf8, 0x4e, 0x44, 0x5b, 0xf0, 0xdc, 0x48, 0xf2, 0x0e, 0xe8, 0xbd,
    0xe2, 0xeb, 0x1e, 0xcd, 0xcd, 0x37, 0x27, 0xab, 0xc2, 0x52, 0xf7, 0x6d, 0xd1, 0xb1, 0xf1, 0x92,
    0xc7, 0xa7, 0xab, 0x25, 0xd4, 0x62, 0xf0, 0x0c, 0x84, 0x99, 0x92, 0x97, 0xad, 0x7c, 0x43, 0xad,
    0x1b, 0x8d, 0x5e, 0xbf, 0x51, 0x6a, 0xaf, 0x3e, 0x0a, 0xe6, 0xc3, 0xe8, 0x23, 0x07, 0x61, 0xb2,
    0x95, 0x8e, 0x6c, 0x38, 0xe2, 0xa8, 0x02, 0xa5, 0x8f, 0x96, 0xef, 0x59, 0xac, 0x57, 0x08, 0x0d,
    0x09, 0x06, 0xd5, 0x05, 0x8f, 0x9b, 0x0b, 0x95, 0x6c, 0xea, 0x4f, 0x2a, 0x55, 0x8e, 0xa1, 0x75,
    0x01, 0x6e, 0xa4, 0xe4, 0xc5, 0xb8, 0x4c, 0xe6, 0xa4, 0x42, 0x66, 0x6d, 0x05, 0x64, 0x71, 0xe9,
    0x72, 0x38, 0x57, 0x48, 0x65, 0xfe, 0x1d, 0x28, 0x6a, 0xc6, 0x3a, 0x9b, 0x24, 0xf4, 0xdf, 0x9b,
    0xe4, 0x85, 0xd8, 0x1a, 0x19, 0xdd, 0x1f, 0x62, 0xf3, 0x79, 0xcd, 0xda, 0xc1, 0x46, 0xe5, 0xaa,
    0x33, 0xba, 0x7e, 0x7a, 0xe5, 0xbd, 0x28, 0xf4, 0x0f, 0x12, 0xaa, 0xc2, 0x9a, 0xd2, 0x85, 0xb8,
    0x0a, 0x67, 0xa6, 0x17, 0x5e, 0x0d, 0x99, 0x13, 0xd7, 0x0d, 0xcd, 0xdd, 0xe7, 0xad, 0x5e, 0x4d,
    0x3a, 0xd0, 0xd2, 0xa8, 0xa2, 0xff, 0xdd, 0xad, 0x21, 0xe2, 0x62, 0x5f, 0xd1, 0x79, 0xbc, 0x32,
    0xb3, 0xb2, 0x62, 0x9a, 0xba, 0xa9, 0xb9, 0x45, 0x5a, 0x6b, 0x17, 0x7d, 0xd0, 0xfa, 0x0d, 0x06,
    0xec, 0x26, 0x9e, 0xf0, 0x7a, 0x7e,
};

// Test exploding data with literal tree and large window.
test "explode_hamlet_8192" {
    var dst: [8192]u8 = undefined;
    var src_used: usize = 0;

    try expect((try implode.hwexplode(
        &hamlet_8192,
        hamlet_8192.len,
        8192,
        true, //large_wnd
        true, //lit_tree
        false, //pk101_bug_compat
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_OK);
    try expect(src_used == hamlet_8192.len);
    try expect(mem.eql(u8, dst[0..8192], hamlet[0..8192]));
}

test "explode_too_short_src" {
    var dst: [8192]u8 = undefined;
    var src_used: usize = 0;
    var i: usize = 0;

    i = hamlet_256.len - 1;
    while (i < hamlet_256.len) : (i -%= 1) {
        try expect((try implode.hwexplode(
            &hamlet_256,
            i,
            256,
            false, //large_wnd
            false, //lit_tree
            false, //pk101_bug_compat
            &src_used,
            &dst,
        )) == implode.explode_stat_t.HWEXPLODE_ERR);
    }

    i = hamlet_8192.len - 1;
    while (i < hamlet_8192.len) : (i -%= 1) {
        try expect((try implode.hwexplode(
            &hamlet_8192,
            i,
            8192,
            true, //large_wnd
            true, //lit_tree
            false, //pk101_bug_compat
            &src_used,
            &dst,
        )) == implode.explode_stat_t.HWEXPLODE_ERR);
    }
}

test "explode_implicit_zeros" {
    var src: [2048]u8 = undefined;
    var dst: [5]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);

    // (No lit tree.)

    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Distance tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Some literals.
    _ = bs.ostream_write(&os, ('1' << 1) | 1, 9);
    _ = bs.ostream_write(&os, ('2' << 1) | 1, 9);

    // A backref: dist 10, len 3 (using small window)
    _ = bs.ostream_write(&os, 0, 1); // Backref marker.
    _ = bs.ostream_write(&os, 10 - 1, 6); // Dist: 10.
    _ = bs.ostream_write(&os, bits_utils.lsb(~@as(u16, 0), 6), 6); // Huffman coded high dist bits.
    _ = bs.ostream_write(&os, bits_utils.reverse16(~@as(u16, 3 - 2), 6), 6); // Huff. len
    src_sz = bs.ostream_bytes_written(&os);

    // Check the expected output.
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_OK);
    try expect(dst[0] == '1');
    try expect(dst[1] == '2');
    try expect(dst[2] == 0x0);
    try expect(dst[3] == 0x0);
    try expect(dst[4] == 0x0);
}

test "explode_too_few_codeword_lens" {
    var src: [2048]u8 = undefined;
    var dst: [10]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);

    // (No lit tree.)

    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Distance tree: but only with 63 symbols use 6 bits.
    _ = bs.ostream_write(&os, 63 - 1, 8);
    i = 0;
    while (i < 63) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }
    src_sz = bs.ostream_bytes_written(&os);
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_ERR);
}

test "explode_too_many_codeword_lens" {
    var src: [2048]u8 = undefined;
    var dst: [10]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);

    // (No lit tree.)

    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Distance tree: but the run-lengths make for too many symbols.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 63) : (i += 1) {
        _ = bs.ostream_write(&os, (3 << 4) | (6 - 1), 8);
    }
    src_sz = bs.ostream_bytes_written(&os);
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_ERR);
}

test "explode_bad_huffman_trees" {
    var src: [2048]u8 = undefined;
    var dst: [10]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);
    // (No lit tree.)
    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }
    // Distance tree: try to use 64 5-bit symbols.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (5 - 1), 8);
    }
    src_sz = bs.ostream_bytes_written(&os);
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_ERR);

    bs.ostream_init(&os, &src, src.len);
    // (No lit tree.)
    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }
    // Distance tree: try to use 64 7-bit symbols.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (7 - 1), 8);
    }
    src_sz = bs.ostream_bytes_written(&os);
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_ERR);
}

test "explode_too_long_backref" {
    var src: [2048]u8 = undefined;
    var dst: [10]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);

    // (No lit tree.)

    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Distance tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Some literals.
    _ = bs.ostream_write(&os, ('f' << 1) | 1, 9);
    _ = bs.ostream_write(&os, ('a' << 1) | 1, 9);
    _ = bs.ostream_write(&os, ('l' << 1) | 1, 9);
    _ = bs.ostream_write(&os, ('a' << 1) | 1, 9);

    // A backref: dist 2, len 6 (using small window)
    _ = bs.ostream_write(&os, 0, 1); // Backref marker.
    _ = bs.ostream_write(&os, 2 - 1, 6); // Dist: 2.
    _ = bs.ostream_write(&os, bits_utils.lsb(~@as(u16, 0), 6), 6); // Huffman coded high dist bits.
    _ = bs.ostream_write(&os, bits_utils.reverse16(~@as(u16, 6 - 2), 6), 6); // Huff. len
    src_sz = bs.ostream_bytes_written(&os);

    // Check the expected output.
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_OK);
    try expect(dst[0] == 'f');
    try expect(dst[1] == 'a');
    try expect(dst[2] == 'l');
    try expect(dst[3] == 'a');
    try expect(dst[4] == 'l');
    try expect(dst[5] == 'a');
    try expect(dst[6] == 'l');
    try expect(dst[7] == 'a');
    try expect(dst[8] == 'l');
    try expect(dst[9] == 'a');

    // Not enough room to output the backref.
    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len - 1,
        false,
        false,
        false,
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_ERR);
}

test "explode_pkz_101_bug_compat" {
    var src: [2048]u8 = undefined;
    var dst: [2 + (3 + 63 + 255)]u8 = undefined;
    var os: bs.ostream_t = undefined;
    var i: usize = 0;
    var src_sz: usize = 0;
    var src_used: usize = 0;

    bs.ostream_init(&os, &src, src.len);

    // Length tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }
    // Distance tree: all 64 symbols use 6 bits.
    _ = bs.ostream_write(&os, 64 - 1, 8);
    i = 0;
    while (i < 64) : (i += 1) {
        _ = bs.ostream_write(&os, (0 << 4) | (6 - 1), 8);
    }

    // Literals.
    _ = bs.ostream_write(&os, ('x' << 1) | 1, 9);
    _ = bs.ostream_write(&os, ('x' << 1) | 1, 9);

    // Backref with maximum length.
    // Because of pkz_101_bug_compat, the maximum length is one byte longer
    // than normal in non-lit_tree mode. It seems PKZip 1.01/1.02 don't
    // actually handle backrefs with this max length, but we should handle
    // it in case it ever occurs.
    _ = bs.ostream_write(&os, 0x0, 1); // Backref marker.
    _ = bs.ostream_write(&os, 2 - 1, 7); // Dist: 2 (large wnd => 7 bits).
    _ = bs.ostream_write(&os, bits_utils.lsb(~@as(u16, 0), 6), 6); // Huffman coded high dist bits.
    _ = bs.ostream_write(&os, 0x0, 6); // Huff. len (max)
    _ = bs.ostream_write(&os, 0xff, 8); // Extra len byte
    src_sz = bs.ostream_bytes_written(&os);

    try expect((try implode.hwexplode(
        &src,
        src_sz,
        dst.len,
        true, //large_wnd=true
        false, //lit_tree=false
        true, //pkz_101_bug_compat=true
        &src_used,
        &dst,
    )) == implode.explode_stat_t.HWEXPLODE_OK);
    try expect(src_used == src_sz);
    i = 0;
    while (i < dst.len) : (i += 1) {
        try expect(dst[i] == 'x');
    }
}

fn roundtrip(
    src: [*]const u8,
    src_len: usize,
    large_wnd: bool,
    lit_tree: bool,
) !void {
    var compressed: [*]u8 = undefined;
    var uncompressed: [*]u8 = undefined;
    var compressed_cap: usize = 0;
    var compressed_size: usize = 0;
    var compressed_used: usize = 0;

    compressed_cap = src_len * 2 + 500;
    var compressed_mem = try allocator.alloc(u8, compressed_cap);
    compressed = compressed_mem.ptr;
    var uncompressed_mem = try allocator.alloc(u8, src_len);
    uncompressed = uncompressed_mem.ptr;

    try expect(implode.hwimplode(
        src,
        src_len,
        large_wnd,
        lit_tree,
        compressed,
        compressed_cap,
        &compressed_size,
    ));

    try expect((try implode.hwexplode(
        compressed,
        compressed_size,
        src_len,
        large_wnd,
        lit_tree,
        false,
        &compressed_used,
        uncompressed,
    )) == implode.explode_stat_t.HWEXPLODE_OK);

    try expect(compressed_used == compressed_size);
    try expect(mem.eql(u8, uncompressed[0..src_len], src[0..src_len]));

    allocator.free(compressed_mem);
    allocator.free(uncompressed_mem);
}

test "implode_roundtrip_empty" {
    const src: [1]u8 = undefined;

    // pointer to outside allowed memory, expecting no one reads it
    var dummy_pointer: [*]u8 = @intToPtr([*]u8, @ptrToInt(&src[0]) + 8);

    try roundtrip(dummy_pointer, 0, false, false);
    try roundtrip(dummy_pointer, 0, false, true);
    try roundtrip(dummy_pointer, 0, true, false);
    try roundtrip(dummy_pointer, 0, true, true);
}

test "implode_roundtrip_basic" {
    var src = "It was the best of times, it was the worst of times.";

    try roundtrip(src, src.len, false, false);
    try roundtrip(src, src.len, false, true);
    try roundtrip(src, src.len, true, false);
    try roundtrip(src, src.len, true, true);
}

test "implode_roundtrip_hamlet" {
    try roundtrip(hamlet, hamlet.len, false, false);
    try roundtrip(hamlet, hamlet.len, false, true);
    try roundtrip(hamlet, hamlet.len, true, false);
    try roundtrip(hamlet, hamlet.len, true, true);
}

test "implode_roundtrip_long_backref" {
    // Use 100 a's to hit case where an extra byte is used to encode the backref length.
    const src = [1]u8{'a'} ** 100;

    try roundtrip(&src, src.len, false, false);
    try roundtrip(&src, src.len, false, true);
    try roundtrip(&src, src.len, true, false);
    try roundtrip(&src, src.len, true, true);
}

test "implode_hamlet_size" {
    var compressed: [1024 * 512]u8 = undefined;
    var compressed_sz: usize = 0;
    var large_wnd: bool = undefined;
    var lit_tree: bool = undefined;

    // PKZIP 1.10
    // pkzip -ex a.zip hamlet.txt
    // 88179 bytes (uses lit tree and large window)

    large_wnd = false;
    lit_tree = false;
    try expect(implode.hwimplode(
        hamlet,
        hamlet.len,
        large_wnd,
        lit_tree,
        &compressed,
        compressed.len,
        &compressed_sz,
    ));
    try expect(compressed_sz == 109248);

    large_wnd = false;
    lit_tree = true;
    try expect(implode.hwimplode(
        hamlet,
        hamlet.len,
        large_wnd,
        lit_tree,
        &compressed,
        compressed.len,
        &compressed_sz,
    ));
    try expect(compressed_sz == 90011);

    large_wnd = true;
    lit_tree = false;
    try expect(implode.hwimplode(
        hamlet,
        hamlet.len,
        large_wnd,
        lit_tree,
        &compressed,
        compressed.len,
        &compressed_sz,
    ));
    try expect(compressed_sz == 99224);

    large_wnd = true;
    lit_tree = true;
    try expect(implode.hwimplode(
        hamlet,
        hamlet.len,
        large_wnd,
        lit_tree,
        &compressed,
        compressed.len,
        &compressed_sz,
    ));
    try expect(compressed_sz == 85741);
}

test "implode_too_short_dst" {
    var dst: [8192]u8 = undefined;
    var large_wnd: bool = undefined;
    var lit_tree: bool = undefined;
    var comp_sz: usize = 0;
    var i: usize = 0;
    var tmp: usize = 0;

    large_wnd = false;
    lit_tree = false;
    try expect(implode.hwimplode(hamlet, 1024, large_wnd, lit_tree, &dst, dst.len, &comp_sz));
    i = 0;
    while (i < comp_sz) : (i += 1) {
        try expect(!implode.hwimplode(hamlet, 1024, large_wnd, lit_tree, &dst, i, &tmp));
    }

    large_wnd = false;
    lit_tree = true;
    try expect(implode.hwimplode(hamlet, 1024, large_wnd, lit_tree, &dst, dst.len, &comp_sz));
    i = 0;
    while (i < comp_sz) : (i += 1) {
        try expect(!implode.hwimplode(hamlet, 1024, large_wnd, lit_tree, &dst, i, &tmp));
    }
}
